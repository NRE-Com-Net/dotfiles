#!/bin/bash

function _exit_shell() {
	if [[ "${EUID}" -eq 0 && -n "${SUDO_USER}" && "${HOME}" = $(eval echo "~${SUDO_USER}") ]]; then
		local SUDO_GROUP
    SUDO_GROUP=$(id -g -n "${SUDO_USER}")
		chown -R "${SUDO_USER}":"${SUDO_GROUP}" "${HOME}"
		exit
	else
		exit
	fi
}

function grep_invalid_utf8 () {
	perl -l -ne '/^([\000-\177]|[\300-\337][\200-\277]|[\340-\357][\200-\277]{2}|[\360-\367][\200-\277]{3}|[\370-\373][\200-\277]{4}|[\374-\375][\200-\277]{5})*$/ or print'
}

function fix_invalid_utf8 () {
	find . | grep-invalid-utf8 | rename 'BEGIN {binmode STDIN, ":encoding(latin1)"; use Encode;}$_=encode("utf8", $_)'
}

function git_remove_submodule() {
	SUBMODULE_NAME=$(echo "${1}" | sed 's/\/$//'); shift

	if git submodule status "${SUBMODULE_NAME}" >/dev/null 2>&1; then
		git submodule deinit -f "${SUBMODULE_NAME}"
		git rm --cached "${SUBMODULE_NAME}"
		rm -rf .git/modules/"${SUBMODULE_NAME}"
		rm -rf "${SUBMODULE_NAME}"
		git config -f .gitmodules --remove-section "submodule.${SUBMODULE_NAME}"
	else
		[ $# -gt 0 ] && echo "fatal: Submodule '${SUBMODULE_NAME}' not found" 1>&2
		exit 1
	fi
}

function _nredf_zplug() {
  ZPLUG_HOME="${NREDF_RC_PATH}/zplug"
  ZPLUG_PLUGINS="${NREDF_RC_PATH}/plugins"
  ZPLUG_LOADFILE="${NREDF_RC_PATH}/plugins.local"
  [[ ! -f "${ZPLUG_LOADFILE}" ]] && touch "${ZPLUG_LOADFILE}"
  PLUGINSRC="${NREDF_RC_PATH}/pluginsrc"

  if [[ -f "${ZPLUG_HOME}/init.zsh" ]]; then
    source "${ZPLUG_HOME}/init.zsh"
    source "${ZPLUG_PLUGINS}"
    source "${ZPLUG_LOADFILE}"

    if ! zplug check; then
      zplug install
    fi

    if ! _nredf_last_run; then
      zplug update
      _nredf_last_run "true"
    fi

    # source plugins and add commands to the PATH
    zplug load
  else
    echo -e '\033[1mSetup zplug\033[0m'
    [[ -d "${ZPLUG_HOME}" ]] && rm -rf "${ZPLUG_HOME}"
    git clone https://github.com/zplug/zplug "${ZPLUG_HOME}"
    source "${ZPLUG_HOME}/init.zsh"
    source "${ZPLUG_PLUGINS}"
    source "${ZPLUG_LOADFILE}"
    zplug install
    zplug load
  fi
}
