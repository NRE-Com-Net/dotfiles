#!/usr/bin/env bash
#
# vim: ts=2 sw=2 et ff=unix ft=bash syntax=sh

for FUNCTION in "${NREDF_DOT_PATH}/shell/common/functions/"*;
  do source "${FUNCTION}"
done

function _nredf_set_ssh_agent() {
  if ! command -v gpgconf &>/dev/null; then
    return 1
  fi
  if [[ -z ${SSH_CONNECTION} && "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]]; then
    unset SSH_AGENT_PID
    SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
    export SSH_AUTH_SOCK
  fi
}

function _nredf_get_sys_info() {
  NREDF_UNAME="$(uname)"
  NREDF_UNAME_LOWER="$(uname -s | tr '[:upper:]' '[:lower:]')"
  NREDF_UNAMEM=$(uname -m)
  case ${NREDF_UNAMEM} in
    armv5*)
      NREDF_ARCH="armv5"
      NDRDF_LIBC="musl"
      ;;
    armv6*)
      NREDF_ARCH="armv6"
      NDRDF_LIBC="musl"
      ;;
    armv7*)
      NREDF_ARCH="arm"
      NDRDF_LIBC="musl"
      ;;
    aarch64)
      NREDF_ARCH="arm64"
      NDRDF_LIBC="musl"
      ;;
    x86)
      NREDF_ARCH="386"
      NDRDF_LIBC="musl"
      ;;
    x86_64)
      NREDF_ARCH="amd64"
      NDRDF_LIBC="musl"
      ;;
    i686)
      NREDF_ARCH="386"
      NDRDF_LIBC="musl"
      ;;
    i386)
      NREDF_ARCH="386"
      NDRDF_LIBC="musl"
      ;;
  esac

  NREDF_UNAMES="$(uname -s | tr '[:upper:]' '[:lower:]')"
  case "${NREDF_UNAMES}" in
    msys_nt*) NREDF_PLATFORM="pc-windows-msvc" ;;
    cygwin_nt*) NREDF_PLATFORM="pc-windows-msvc";;
    mingw*) NREDF_PLATFORM="pc-windows-msvc" ;;
    linux) NREDF_PLATFORM="unknown-linux-musl" ;;
    darwin) NREDF_PLATFORM="apple-darwin" ;;
    freebsd) NREDF_PLATFORM="unknown-freebsd" ;;
  esac

  NREDF_OS=$(uname|tr '[:upper:]' '[:lower:]')
  case "${NREDF_OS}" in
    mingw*) NREDF_OS='windows';;
    darwin) NREDF_OS='macos';;
  esac

  export NREDF_ARCH NREDF_LIBC NREDF_OS NREDF_PLATFORM NREDF_UNAME NREDF_UNAME_LOWER NREDF_UNAMEM NREDF_UNAMES
}

function _nredf_github_latest_release() {
  local GHUSER=${1}
  local GHREPO=${2}
  local TAGREGEX=${3:-""}
  local PREFIX=${4:-""}
  local CACHEFILE="${NREDF_GHCACHE}/nredf_github_latest_release-${GHUSER}-${GHREPO}"

  if [[ ! -s "${CACHEFILE}" || $(date -r "${CACHEFILE}" +%s) -le $(($(date +%s) - 3600 )) ]]; then
    if command -v jq &>/dev/null; then
      # shellcheck disable=SC2086
      command curl -fs "https://api.github.com/repos/${GHUSER}/${GHREPO}/releases" | command jq -r 'first(.[].tag_name | select(startswith("'${TAGREGEX}'"))) | sub("'^${PREFIX}'"; "")' > "${CACHEFILE}"
    else
      # shellcheck disable=SC2086
      command curl -fs "https://api.github.com/repos/${GHUSER}/${GHREPO}/releases" | command grep -Eo '"tag_name":[![:space:]]*"'${TAGREGEX}'[-.0-9a-zA-Z]*"' | command awk -F '"' '{print $4}' | command sed -e "s/^${PREFIX}//" | command head -n1 > "${CACHEFILE}"
    fi
  fi
  cat "${CACHEFILE}"
}

function _nredf_github_download_latest() {
  local GHUSER=${1}
  local GHREPO=${2}
  local GHFILE=${3}
  local VERSION=${4}
  local VERSIONURLENC

  if [[ ${VERSION} == "latest" ]]; then
    command curl -Lfso "${NREDF_DOWNLOADS}/${GHFILE}" "https://github.com/${GHUSER}/${GHREPO}/releases/latest/download/${GHFILE}"
  else
    VERSIONURLENC=$(_nredf_urlencode "${VERSION}")
    command curl -Lfso "${NREDF_DOWNLOADS}/${GHFILE}" "https://github.com/${GHUSER}/${GHREPO}/releases/download/${VERSIONURLENC}/${GHFILE}"
  fi

  return ${?}
}

function _nredf_urlencode() {
    old_lc_collate=$LC_COLLATE
    LC_COLLATE=C

    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:$i:1}"
        case $c in
            [a-zA-Z0-9.~_-]) printf '%s' "$c" ;;
            *) printf '%%%02X' "'$c" ;;
        esac
    done

    LC_COLLATE=$old_lc_collate
}

function _nredf_set_defaults() {
  echo -e '\033[1mSetting defaults\033[0m'
  [[ -f "${HOME}/.proxy.local" ]] && source "${HOME}/.proxy.local"

  export NREDF_COMMON_RC_LOCAL="${HOME}/.config/shell"
  export NREDF_RC_PATH="${NREDF_DOT_PATH}/shell/${NREDF_SHELL_NAME}"
  export NREDF_RC_LOCAL="${HOME}/.config/${NREDF_SHELL_NAME}"

  # You may need to manually set your language environment
  export LANG=en_US.UTF-8
  export LANGUAGE=en_US.UTF-8
  export LC_ALL=en_US.UTF-8

  export XDG_CONFIG_HOME="${HOME}/.config"
  export XDG_CACHE_HOME="${HOME}/.cache"
  export XDG_BIN_HOME="${HOME}/.local/bin"
  export XDG_DATA_HOME="${HOME}/.local/share"
  export XDG_STATE_HOME="${HOME}/.local/state"
  export NREDF_DOWNLOADS="${XDG_CACHE_HOME}/nredf/Download"
  export NREDF_GHCACHE="${XDG_CACHE_HOME}/nredf/GHVersionCache"
  for XDG_PATH in "${NREDF_RC_LOCAL}" "${NREDF_COMMON_RC_LOCAL}" "${XDG_CONFIG_HOME}" "${XDG_BIN_HOME}" "${XDG_CACHE_HOME}" "${NREDF_GHCACHE}" "${NREDF_DOWNLOADS}" "${XDG_DATA_HOME}" "${XDG_STATE_HOME}"; do
    [[ ! -d "${XDG_PATH}" ]] && mkdir -p "${XDG_PATH}"
  done

  export PATH="${HOME}/bin:${XDG_BIN_HOME}:/usr/local/bin:${PATH}"
  [[ -d /snap/bin ]] && export PATH="${PATH}:/snap/bin"
  export GOPATH="${HOME}/.local"
  export RLWRAP_HOME="${XDG_CACHE_HOME}/RLWRAP"
  [[ -s "${HOME}/.rvm/scripts/rvm" ]] && source "${HOME}/.rvm/scripts/rvm"

  # Load PYENV if you are using it
  if [[ -s ${HOME}/.pyenv ]]; then
    export PYENV_ROOT="${HOME}/.pyenv"
    export PATH="${PYENV_ROOT}/bin:${PATH}"
    eval "$(pyenv init -)"
  fi

  # FZF Defaults
  export FZF_DEFAULT_OPTS='--bind tab:down --bind btab:up --cycle --ansi'
  if command -v fd &>/dev/null; then
    export FZF_DEFAULT_COMMAND='fd --type file --follow --hidden --exclude .git --color=always'
    export FZF_ALT_C_COMMAND="fd --type directory --hidden --follow --exclude .git"
  else
    export FZF_DEFAULT_COMMAND="find -L"
  fi
  export FZF_CTRL_T_COMMAND="${FZF_DEFAULT_COMMAND}"

  #  VIM/NVIM Defaults
  # shellcheck disable=SC2016
  export GVIMINIT='let $MYGVIMRC="$XDG_CONFIG_HOME/vim/gvimrc" | source $MYGVIMRC'
  # shellcheck disable=SC2016
  export VIMINIT='let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc" | source $MYVIMRC'
  export NVIM_LOG_FILE="${XDG_CACHE_HOME}/vim/nvim_debug.log"
  export NVIM_RPLUGIN_MANIFESTE="${XDG_CACHE_HOME}/vim/rplugin.vim"

  # Timewarrior
  export TIMEWARRIORDB="${XDG_CACHE_HOME}/timewarrior"

  # docker-compose
  export COMPOSE_PARALLEL_LIMIT=10
  export COMPOSE_HTTP_TIMEOUT=600

  # k9s config directory
  export K9SCONFIG="${XDG_CONFIG_HOME}/k9s"

  # readline config
  export INPUTRC="${XDG_CONFIG_HOME}/readline/inputrc"

  # screen config
  export SCREENRC="${XDG_CONFIG_HOME}/screen/screenrc"

  # wget config
  export WGETRC="${XDG_CONFIG_HOME}/wgetrc"

  export XAUTHORITY="${XDG_RUNTIME_DIR}/Xauthority"

  export _Z_DATA="${XDG_DATA_HOME}/z"

  # asdf config
  export ASDF_DIR="${HOME}/.homesick/repos/asdf"
  export ASDF_DATA_DIR="${XDG_DATA_HOME}/asdf"
  export ASDF_CONFIG_FILE="${XDG_CONFIG_HOME}/asdf/asdfrc"
  export ADSF_DEFAULT_TOOL_VERSIONS_FILENAME="${XDG_CONFIG_HOME}/asdf/tool-versions"

  # make less more friendly for non-text input files, see lesspipe(1)
  if [ -x /usr/bin/lesspipe ]; then eval "$(SHELL=/bin/sh lesspipe)"; fi

  if command -v dircolors &>/dev/null; then
    if [[ -e "${XDG_CONFIG_HOME}/dircolors" ]]; then eval "$(dircolors "${XDG_CONFIG_HOME}/dircolors")"; fi
  fi
}

function _nredf_set_local() {
  echo -e '\033[1mSourcing local aliases and functions\033[0m'
  if [[ ! -d "${NREDF_RC_LOCAL}" ]]; then mkdir -p "${NREDF_RC_LOCAL}"; fi
  if [[ -e "${NREDF_DOT_PATH}/shell/common/aliases" ]]; then source "${NREDF_DOT_PATH}/shell/common/aliases"; fi
  if [[ -e "${NREDF_RC_PATH}/aliases" ]]; then source "${NREDF_RC_PATH}/aliases"; fi
  if [[ -f "${NREDF_RC_LOCAL}/aliases.local" ]]; then source "${NREDF_RC_LOCAL}/aliases.local"; else touch "${NREDF_RC_LOCAL}/aliases.local"; fi
  if [[ -e "${NREDF_RC_PATH}/functions" ]]; then source "${NREDF_RC_PATH}/functions"; fi
  if [[ -f "${NREDF_RC_LOCAL}/functions.local" ]]; then source "${NREDF_RC_LOCAL}/functions.local"; else touch "${NREDF_RC_LOCAL}/functions.local"; fi
  if [[ -f "${NREDF_COMMON_RC_LOCAL}/rc.local" ]]; then source "${NREDF_COMMON_RC_LOCAL}/rc.local"; else touch "${NREDF_COMMON_RC_LOCAL}/rc.local"; fi
  if [[ -f "${NREDF_RC_LOCAL}/rc.local" ]]; then source "${NREDF_RC_LOCAL}/rc.local"; else touch "${NREDF_RC_LOCAL}/rc.local"; fi
}

function _nredf_cleanup_dotfiles() {
  if _nredf_last_run; then
    return 0
  fi

  if [[ "${NREDF_OS}" == "linux" ]]; then
    echo -e '\033[1mSearch and delete broken symlinks\033[0m'
    find "${HOME}" -type l ! -exec test -e {} \; -delete
    _nredf_last_run "" "true"
  fi
}

function _nredf_last_run() {
  if [[ "${1}" != "" ]]; then
    CURRENT_FUNCTION="${1}"
  elif [[ -n $BASH_VERSION ]]; then
    local CURRENT_FUNCTION="${FUNCNAME[1]}"
  else  # zsh
    # shellcheck disable=SC2124,SC2154
    local CURRENT_FUNCTION="${funcstack[@]:1:1}"
  fi
  local SUCCESS="${2:-"false"}"
  local TIMEOUT="${3:-"43200"}"
  # shellcheck disable=SC2155
  local CURRENT_TIME="$(date +%s)"
  [[ ! -d "${XDG_CACHE_HOME}/nredf/LRCache" ]] && mkdir -p "${XDG_CACHE_HOME}/nredf/LRCache"
  local LAST_RUN_FILE="${XDG_CACHE_HOME}/nredf/LRCache/last_run${CURRENT_FUNCTION}.txt"
  # shellcheck disable=SC2155
  local LAST_RUN="$(cat "${LAST_RUN_FILE}" 2>/dev/null || echo "0")"

  if [[ "${LAST_RUN}" -gt "${CURRENT_TIME}" ]]; then
    return 0
  elif ${SUCCESS}; then
    echo "$((CURRENT_TIME + TIMEOUT))" > "${LAST_RUN_FILE}"
    return 0
  else
    return 1
  fi
}

function _nredf_remote_multiplexer() {
  if [[ "${TERM_PROGRAM}" != "vscode" ]]; then
    if [[ -n "${SSH_TTY}" || -n "${WSL_DISTRO_NAME}" ]] && command -v zellij &>/dev/null; then
      if [[ -z "${ZELLIJ}" ]]; then
        echo -e "\033[1mStarting multiplexer\033[0m"
        if [[ -n "${SSH_AUTH_SOCK}" ]] && [[ "${SSH_AUTH_SOCK}" != "${HOME}/.ssh/agent_sock" ]]; then
            unlink "${HOME}/.ssh/auth_sock" 2>/dev/null
            ln -sf "${SSH_AUTH_SOCK}" "${HOME}/.ssh/auth_sock"
            export SSH_AUTH_SOCK="${HOME}/.ssh/auth_sock"
        fi
        zellij attach -c "$(hostname -s)"
      fi
    elif [[ "${NREDF_OS}" == "linux" ]] && [[ -n "${SSH_TTY}" ]] && [[ "${PS1}" != "" ]] && command -pv tmux &>/dev/null; then
      if [[ -z "${TMUX}" ]]; then
        if [ -n "${SSH_AUTH_SOCK}" ] && [ "${SSH_AUTH_SOCK}" != "${HOME}/.ssh/agent_sock" ]; then
            unlink "${HOME}/.ssh/auth_sock" 2>/dev/null
            ln -sf "${SSH_AUTH_SOCK}" "${HOME}/.ssh/auth_sock"
            export SSH_AUTH_SOCK="${HOME}/.ssh/auth_sock"
        fi
              # Start tmux on connection
        if [[ "$(tmux -L "$(hostname -s)" has-session -t "$(hostname -s)" &>/dev/null; echo $?)" = 0 ]]; then
            echo -e '\033[1mAttach to running tmux session\033[0m'
            tmux -L "$(hostname -s)" attach-session -t "$(hostname -s)"
        elif [[ "$(which tmux 2>/dev/null)" != "" ]] && [[ "${TMUX}" = "" ]]; then
            echo -e '\033[1mStart new tmux session\033[0m'
            tmux -L "$(hostname -s)" new-session -s "$(hostname -s)"
        fi
      fi
    fi
  fi
}

function _nredf_install_tool() {
  local GHUSER=${1}
  local GHREPO=${2}
  local BINARY=${3}
  local FILENAME=${4}
  local TAGVERSION=${5}
  local VERSION=${6}
  local VERSION_CMD=${7}
  local EXTRACT_CMD=${8}

  if [[ -n $BASH_VERSION ]]; then
    local CURRENT_TOOL="${FUNCNAME[1]}"
  else  # zsh
    # shellcheck disable=SC2124,SC2154
    local CURRENT_TOOL="${funcstack[@]:1:1}"
  fi

  if _nredf_last_run "${CURRENT_TOOL}"; then
    return 0
  fi

  if [[ "${VERSION}" == "" ]]; then
    return 0
  fi

  if [[ ! -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
    rm -rf "${XDG_BIN_HOME:?}/${BINARY:?}"
  elif [[ ! -x "${XDG_BIN_HOME}/${BINARY}" ]]; then
    rm -rf "${XDG_BIN_HOME:?}/${BINARY:?}"
  elif [[ -x "${XDG_BIN_HOME}/${BINARY}" ]]; then
    local CURRENT_VERSION
    CURRENT_VERSION="$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")"
    if [[ "${VERSION}" == "" ]]; then
      echo -e "\033[1;33m  \U2713 Version could not be fetched \033[0m"
      _nredf_last_run "${CURRENT_TOOL}" "true" "3600"
      return 1
    fi
    if [[ "${VERSION}" == "${CURRENT_VERSION}" || "${TAGVERSION}" == "${CURRENT_VERSION}" ]]; then
      echo -e "\033[1;32m  \U2713 ${BINARY} (${VERSION}) up-to-date\033[0m"
      _nredf_last_run "${CURRENT_TOOL}" "true"
      return 0
    fi
  fi

  echo -e "\033[1;36m  \U25B6 ${BINARY} is getting installed in version ${VERSION}\033[0m"
  _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${FILENAME}" "${TAGVERSION}"
  if [[ -f "${NREDF_DOWNLOADS}/${FILENAME}" ]]; then
    eval "${EXTRACT_CMD}"
  else
    echo -e "\033[1;31m    \U21B3 Installation failed\033[0m"
    return 1
  fi
  if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
    chmod +x "${XDG_BIN_HOME}/${BINARY}"
  else
    echo -e "\033[1;31m    \U21B3 Installation failed\033[0m"
    return 1
  fi
  echo -e "\033[1;32m    \U21B3 Installation successful\033[0m"
  _nredf_last_run "${CURRENT_TOOL}" "true"
}

function _nredf_install_tools() {
  echo -e "\033[1mLooking for fresh batteries\033[0m"
  _nredf_install_jq
  _nredf_install_fzf
  _nredf_install_nvim
  _nredf_install_lf
  _nredf_install_lazygit
  _nredf_install_btop
  _nredf_install_ctop
  _nredf_install_zellij
  _nredf_install_ripgrep
  _nredf_install_fd
  _nredf_install_duf
  _nredf_install_diskus
  _nredf_install_dust
  _nredf_install_yq
  [[ -f "${HOME}/.local/bin/drone" ]] && _nredf_install_drone
  [[ -f "${HOME}/.kube/config" ]] && _nredf_install_k8s_ops
}

function _nredf_install_jq() {
  _nredf_get_sys_info

  local GHUSER="jqlang"
  local GHREPO="jq"
  local BINARY="jq"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${BINARY}-${NREDF_OS}-${NREDF_ARCH}"
  local VERSION_CMD="--version"
  local EXTRACT_CMD="mv \"${NREDF_DOWNLOADS}/${FILENAME}\" \"${XDG_BIN_HOME}/${BINARY}\""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"
}

function _nredf_install_fzf() {
  _nredf_get_sys_info

  if [[ ${NREDF_OS} =~ ^(macos|windows)$ ]]; then
    local FILEEXT="zip"
  fi

  local GHUSER="junegunn"
  local GHREPO="fzf"
  local BINARY="fzf"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${BINARY}-${VERSION}-${NREDF_UNAME_LOWER}_${NREDF_ARCH}.${FILEEXT:-tar.gz}"
  local VERSION_CMD="--version | awk '{print \$1}'"
  # shellcheck disable=SC2016
  local EXTRACT_CMD='
    tar -xzf "${NREDF_DOWNLOADS}/${FILENAME}" -C "${XDG_BIN_HOME}/"

    #command curl -Lfso "${XDG_BIN_HOME}/fzf-tmux" "https://raw.githubusercontent.com/${GHUSER}/${GHREPO}/master/bin/fzf-tmux"

    #if [[ -f "${XDG_BIN_HOME}/fzf-tmux" ]]; then
    #  chmod +x "${XDG_BIN_HOME}/fzf-tmux"
    #else
    #  return 1
    #fi

    [[ ! -d ${HOME}/.config/fzf ]] && /bin/mkdir "${HOME}/.config/fzf"
    for FZF_FILE in completion.bash completion.zsh key-bindings.bash key-bindings.zsh key-bindings.fish; do
      command curl -Lfso "${HOME}/.config/fzf/${FZF_FILE}" "https://raw.githubusercontent.com/${GHUSER}/${GHREPO}/master/shell/${FZF_FILE}"
    done

    if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
      [[ -f "${HOME}/.config/fzf/completion.${NREDF_SHELL_NAME}" ]] && source "${HOME}/.config/fzf/completion.${NREDF_SHELL_NAME}"
      [[ -f "${HOME}/.config/fzf/key-bindings.${NREDF_SHELL_NAME}" ]] && source "${HOME}/.config/fzf/key-bindings.${NREDF_SHELL_NAME}"
    fi

    [[ -f "${NREDF_DOT_PATH}/shell/common/fzf" ]] && source "${NREDF_DOT_PATH}/shell/common/fzf"
  '
  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"
}

function _nredf_install_nvim() {
  _nredf_get_sys_info

  if [[ ${NREDF_OS} =~ ^(macos|windows)$ ]]; then
    return 0
  fi

  local GHUSER="neovim"
  local GHREPO="neovim"
  local BINARY="nvim"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}" "v")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${BINARY}.appimage"
  local VERSION_CMD="--version | awk '/NVIM/{print \$2}'"
  # shellcheck disable=SC2016
  local EXTRACT_CMD='
    if [[ -f "${NREDF_DOWNLOADS}/${BINARY}.appimage" ]]; then
      chmod +x "${NREDF_DOWNLOADS}/${BINARY}.appimage"
    else
      return 1
    fi
    PRERC_CURRENT_DIR=$(pwd)
    if [[ -d "${HOME}/.cache/vim/" ]]; then
      cd "${HOME}/.cache/vim/" || return
      [[ -d "${HOME}/.cache/vim/squashfs-root" ]] && rm -rf "${HOME}/.cache/vim/squashfs-root"
    else
      mkdir -p "${HOME}/.cache/vim/"
      cd "${HOME}/.cache/vim/" || return
    fi
    "${NREDF_DOWNLOADS}/${BINARY}.appimage" --appimage-extract &>/dev/null
    cd "${PRERC_CURRENT_DIR}" || return
    unset PRERC_CURRENT_DIR
    ln -sf "${HOME}/.cache/vim/squashfs-root/AppRun" "${XDG_BIN_HOME}/nvim"
  '

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"
}

function _nredf_install_lf() {
  _nredf_get_sys_info

  local GHUSER="gokcehan"
  local GHREPO="lf"
  local BINARY="lf"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${BINARY}-${NREDF_OS}-${NREDF_ARCH}.tar.gz"
  local VERSION_CMD="-version"
  local EXTRACT_CMD="tar -xzf \"${NREDF_DOWNLOADS}/${FILENAME}\" -C \"${XDG_BIN_HOME}/\""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"

  export LF_ICONS="tw=:st=:ow=:dt=:di=:fi=:ln=:or=:ex=:*.c=:*.cc=:*.clj=:*.coffee=:*.cpp=:*.css=:*.d=:*.dart=:*.erl=:*.exs=:*.fs=:*.go=:*.h=:*.hh=:*.hpp=:*.hs=:*.html=:*.java=:*.jl=:*.js=:*.json=:*.lua=:*.md=:*.php=:*.pl=:*.pro=:*.py=:*.rb=:*.rs=:*.scala=:*.ts=:*.vim=:*.cmd=:*.ps1=:*.sh=:*.bash=:*.zsh=:*.fish=:*.tar=:*.tgz=:*.arc=:*.arj=:*.taz=:*.lha=:*.lz4=:*.lzh=:*.lzma=:*.tlz=:*.txz=:*.tzo=:*.t7z=:*.zip=:*.z=:*.dz=:*.gz=:*.lrz=:*.lz=:*.lzo=:*.xz=:*.zst=:*.tzst=:*.bz2=:*.bz=:*.tbz=:*.tbz2=:*.tz=:*.deb=:*.rpm=:*.jar=:*.war=:*.ear=:*.sar=:*.rar=:*.alz=:*.ace=:*.zoo=:*.cpio=:*.7z=:*.rz=:*.cab=:*.wim=:*.swm=:*.dwm=:*.esd=:*.jpg=:*.jpeg=:*.mjpg=:*.mjpeg=:*.gif=:*.bmp=:*.pbm=:*.pgm=:*.ppm=:*.tga=:*.xbm=:*.xpm=:*.tif=:*.tiff=:*.png=:*.svg=:*.svgz=:*.mng=:*.pcx=:*.mov=:*.mpg=:*.mpeg=:*.m2v=:*.mkv=:*.webm=:*.ogm=:*.mp4=:*.m4v=:*.mp4v=:*.vob=:*.qt=:*.nuv=:*.wmv=:*.asf=:*.rm=:*.rmvb=:*.flc=:*.avi=:*.fli=:*.flv=:*.gl=:*.dl=:*.xcf=:*.xwd=:*.yuv=:*.cgm=:*.emf=:*.ogv=:*.ogx=:*.aac=:*.au=:*.flac=:*.m4a=:*.mid=:*.midi=:*.mka=:*.mp3=:*.mpc=:*.ogg=:*.ra=:*.wav=:*.oga=:*.opus=:*.spx=:*.xspf=:*.pdf=:*.nix=:"
}

function _nredf_install_lazygit() {
  _nredf_get_sys_info
  if [[ "${NREDF_UNAMEM}" == "aarch64" ]]; then
    NREDF_UNAMEM="arm64"
  fi

  local GHUSER="jesseduffield"
  local GHREPO="lazygit"
  local BINARY="lazygit"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${BINARY}_${VERSION}_${NREDF_UNAME}_${NREDF_UNAMEM}.tar.gz"
  local VERSION_CMD="-v | awk '{print \$6}' | awk -F= '{gsub(/,/,\"\"); print \$2}'"
  local EXTRACT_CMD="tar -xzf \"${NREDF_DOWNLOADS}/${FILENAME}\" -C \"${XDG_BIN_HOME}/\" \"${BINARY}\""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"
}

function _nredf_install_btop() {
  _nredf_get_sys_info

  if [[ ${NREDF_OS} =~ ^(macos|windows)$ ]]; then
    return 0
  fi

  local GHUSER="aristocratos"
  local GHREPO="btop"
  local BINARY="btop"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${BINARY}-${NREDF_UNAMEM}-${NREDF_OS}${NDRDF_LIBC/#/_}.tbz"
  local VERSION_CMD="-v | awk '{sub(\",\",\"\"); print \$3}'"
  local EXTRACT_CMD="tar -xjf \"${NREDF_DOWNLOADS}/${FILENAME}\" -C \"${XDG_BIN_HOME}/\" --strip-components=3 --wildcards --no-anchored \"bin/${BINARY}\""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"
}

function _nredf_install_ctop() {
  if ! command -pv docker >/dev/null 2>&1; then
    return 0
  fi

  _nredf_get_sys_info

  local GHUSER="bcicen"
  local GHREPO="ctop"
  local BINARY="ctop"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${BINARY}-${VERSION}-${NREDF_OS}-${NREDF_ARCH}"
  local VERSION_CMD="-v | awk '{sub(\",\",\"\"); print \$3}'"
  local EXTRACT_CMD="mv \"${NREDF_DOWNLOADS}/${FILENAME}\" \"${XDG_BIN_HOME}/${BINARY}\""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"
}

function _nredf_install_drone() {
  _nredf_get_sys_info

  local GHUSER="harness"
  local GHREPO="drone-cli"
  local BINARY="drone"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${BINARY}_${NREDF_OS}_${NREDF_ARCH}.tar.gz"
  local VERSION_CMD="--version 2>/dev/null | awk '{print \$3}'"
  local EXTRACT_CMD="tar -xzf \"${NREDF_DOWNLOADS}/${FILENAME}\" -C \"${XDG_BIN_HOME}/\""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"
}

function _nredf_install_zellij() {
  _nredf_get_sys_info

  local GHUSER="zellij-org"
  local GHREPO="zellij"
  local BINARY="zellij"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${GHREPO}-${NREDF_UNAMEM}-${NREDF_PLATFORM}.tar.gz"
  local VERSION_CMD="--version | awk '{print \$2}'"
  local EXTRACT_CMD="tar -xzf \"${NREDF_DOWNLOADS}/${FILENAME}\" -C \"${XDG_BIN_HOME}/\""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/${BINARY}" ]] && "${XDG_BIN_HOME}/${BINARY}" setup --generate-completion "${NREDF_SHELL_NAME}" > "${XDG_CONFIG_HOME}/completion/${NREDF_SHELL_NAME}/_${BINARY}"
  fi
}

function _nredf_install_ripgrep() {
  _nredf_get_sys_info
  if [[ "${NREDF_UNAMEM}" == "aarch64" ]]; then
    NREDF_PLATFORM="unknown-linux-gnu"
  fi

  local GHUSER="BurntSushi"
  local GHREPO="ripgrep"
  local BINARY="rg"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${GHREPO}-${VERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}.tar.gz"
  local VERSION_CMD="--version | awk '/ripgrep/{print \$2}'"
  local EXTRACT_CMD="tar -xzf \"${NREDF_DOWNLOADS}/${FILENAME}\" -C \"${NREDF_DOWNLOADS}/\" && cp \"${NREDF_DOWNLOADS}/${FILENAME%.tar.gz}/${BINARY}\" \"${XDG_BIN_HOME}/\"; cp \"${NREDF_DOWNLOADS}/${FILENAME%.tar.gz}/complete/_rg\" \"${XDG_CONFIG_HOME}/completion/zsh/_rg\"; cp \"${NREDF_DOWNLOADS}/${FILENAME%.tar.gz}/complete/rg.bash\" \"${XDG_CONFIG_HOME}/completion/bash/rg.bash\""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"
}

function _nredf_install_fd() {
  _nredf_get_sys_info
  if [[ "${NREDF_UNAMEM}" == "aarch64" ]]; then
    NREDF_PLATFORM="unknown-linux-gnu"
  fi

  local GHUSER="sharkdp"
  local GHREPO="fd"
  local BINARY="fd"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${GHREPO}-${TAGVERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}.tar.gz"
  local VERSION_CMD="--version | awk '/fd/{print \$2}'"
  local EXTRACT_CMD="tar -xzf \"${NREDF_DOWNLOADS}/${FILENAME}\" -C \"${NREDF_DOWNLOADS}/\" && cp \"${NREDF_DOWNLOADS}/${FILENAME%.tar.gz}/${BINARY}\" \"${XDG_BIN_HOME}/\"; cp \"${NREDF_DOWNLOADS}/${FILENAME%.tar.gz}/autocomplete/_fd\" \"${XDG_CONFIG_HOME}/completion/zsh/_fd\"; cp \"${NREDF_DOWNLOADS}/${FILENAME%.tar.gz}/autocomplete/fd.bash\" \"${XDG_CONFIG_HOME}/completion/bash/fd.bash\""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"
}

function _nredf_install_duf() {
  _nredf_get_sys_info
  if [[ "${NREDF_UNAMEM}" == "aarch64" ]]; then
    NREDF_UNAMEM="arm64"
  fi

  local GHUSER="muesli"
  local GHREPO="duf"
  local BINARY="duf"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${GHREPO}_${VERSION}_${NREDF_OS}_${NREDF_UNAMEM}.tar.gz"
  local VERSION_CMD="-version | awk '/duf/{print \$2}'"
  local EXTRACT_CMD="tar -xzf \"${NREDF_DOWNLOADS}/${FILENAME}\" -C \"${XDG_BIN_HOME}/\" ${BINARY}"

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"

  if alias duf &>/dev/null; then
    unalias duf &>/dev/null
  fi
}

function _nredf_install_diskus() {
  _nredf_get_sys_info
  if [[ "${NREDF_UNAMEM}" == "aarch64" ]]; then
    NREDF_PLATFORM="unknown-linux-gnu"
  fi

  local GHUSER="sharkdp"
  local GHREPO="diskus"
  local BINARY="diskus"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${GHREPO}-${TAGVERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}.tar.gz"
  local VERSION_CMD="--version | awk '/diskus/{print \$2}'"
  local EXTRACT_CMD="tar -xzf \"${NREDF_DOWNLOADS}/${FILENAME}\" -C \"${NREDF_DOWNLOADS}/\"; cp \"${NREDF_DOWNLOADS}/${FILENAME%.tar.gz}/${BINARY}\" \"${XDG_BIN_HOME}/\""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"
}

function _nredf_install_dust() {
  _nredf_get_sys_info

  local GHUSER="bootandy"
  local GHREPO="dust"
  local BINARY="dust"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${GHREPO}-${TAGVERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}.tar.gz"
  local VERSION_CMD="--version | awk '/Dust/{print \$2}'"
  local EXTRACT_CMD="tar -xzf \"${NREDF_DOWNLOADS}/${FILENAME}\" -C \"${NREDF_DOWNLOADS}/\"; cp \"${NREDF_DOWNLOADS}/${FILENAME%.tar.gz}/${BINARY}\" \"${XDG_BIN_HOME}/\""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"
}

function _nredf_install_yq() {
  _nredf_get_sys_info

  local GHUSER="mikefarah"
  local GHREPO="yq"
  local BINARY="yq"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION="${TAGVERSION}"
  local FILENAME="${GHREPO}_${NREDF_OS}_${NREDF_ARCH}.tar.gz"
  local VERSION_CMD="-V | awk '{print \$4}'"
  local EXTRACT_CMD="tar -xzf \"${NREDF_DOWNLOADS}/${FILENAME}\" -C \"${XDG_BIN_HOME}/\" \"./${FILENAME%.tar.gz}\" && mv \"${XDG_BIN_HOME}/${FILENAME%.tar.gz}\" \"${XDG_BIN_HOME}/${BINARY}\""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/${BINARY}" ]] && "${XDG_BIN_HOME}/${BINARY}" shell-completion "${NREDF_SHELL_NAME}" > "${XDG_CONFIG_HOME}/completion/${NREDF_SHELL_NAME}/_${BINARY}"
  fi
}

function _nredf_install_k8s_ops() {
  _nredf_install_kubectl
  _nredf_install_krew
  _nredf_install_kubeadm
  _nredf_install_kubeseal
  _nredf_install_fluxctl
  _nredf_install_flux
  _nredf_install_helm
  _nredf_install_k9s
  _nredf_install_velero
  _nredf_install_kustomize
  _nredf_install_stern
  _nredf_install_calico
  _nredf_install_kubent
}

function _nredf_install_kubectl() {
  _nredf_get_sys_info

  local GHUSER=""
  local GHREPO=""
  local BINARY="kubectl"
  # shellcheck disable=SC2155
  local TAGVERSION=$(command curl -L -s https://dl.k8s.io/release/stable.txt)
  local VERSION=${TAGVERSION#v}
  local FILENAME="${BINARY}"
  local VERSION_CMD="version --output yaml --client | yq '.clientVersion.gitVersion'"
  local EXTRACT_CMD="cp \"${NREDF_DOWNLOADS}/${FILENAME}\" \"${XDG_BIN_HOME}/${BINARY}\""

  if [[ ! -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
    rm -rf "${XDG_BIN_HOME:?}/${BINARY:?}"
  elif [[ ! -x "${XDG_BIN_HOME}/${BINARY}" ]]; then
    rm -rf "${XDG_BIN_HOME:?}/${BINARY:?}"
  elif [[ -x "${XDG_BIN_HOME}/${BINARY}" ]]; then
    local CURRENT_VERSION
    CURRENT_VERSION="$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")"
    if [[ "${VERSION}" == "" ]]; then
      echo -e "\033[1;33m  \U2713 Version could not be fetched \033[0m"
      _nredf_last_run "${CURRENT_TOOL}" "true" "3600"
      return 1
    fi
    if [[ "${VERSION}" == "${CURRENT_VERSION}" || "${TAGVERSION}" == "${CURRENT_VERSION}" ]]; then
      echo -e "\033[1;32m  \U2713 ${BINARY} (${VERSION}) up-to-date\033[0m"
      _nredf_last_run "${CURRENT_TOOL}" "true"
      return 0
    fi
  fi

  echo -e "\033[1;36m  \U25B6 ${BINARY} is getting installed in version ${VERSION}\033[0m"
  command curl -Lfso "${NREDF_DOWNLOADS}/${FILENAME}" "https://dl.k8s.io/release/${TAGVERSION}/bin/${NREDF_UNAME_LOWER}/${NREDF_ARCH}/${BINARY}"
  if [[ -f "${NREDF_DOWNLOADS}/${FILENAME}" ]]; then
    eval "${EXTRACT_CMD}"
  else
    echo -e "\033[1;31m    \U21B3 Installation failed\033[0m"
    return 1
  fi
  if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
    chmod +x "${XDG_BIN_HOME}/${BINARY}"
  else
    echo -e "\033[1;31m    \U21B3 Installation failed\033[0m"
    return 1
  fi

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/${BINARY}" ]] && "${XDG_BIN_HOME}/${BINARY}" completion "${NREDF_SHELL_NAME}" 2>/dev/null > "${XDG_CONFIG_HOME}/completion/${NREDF_SHELL_NAME}/_${BINARY}"
  fi
  echo -e "\033[1;32m    \U21B3 Installation successful\033[0m"
  _nredf_last_run "${CURRENT_TOOL}" "true"
}

function _nredf_install_kubeadm() {
  _nredf_get_sys_info

  if [[ ${NREDF_OS} =~ ^(macos|windows)$ ]]; then
    return 0
  fi

  local GHUSER=""
  local GHREPO=""
  local BINARY="kubeadm"
  # shellcheck disable=SC2155
  local TAGVERSION=$(command curl -L -s https://dl.k8s.io/release/stable.txt)
  local VERSION=${TAGVERSION#v}
  local FILENAME="${BINARY}"
  local VERSION_CMD="version -o short"
  local EXTRACT_CMD="cp \"${NREDF_DOWNLOADS}/${FILENAME}\" \"${XDG_BIN_HOME}/${BINARY}\""

  if [[ ! -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
    rm -rf "${XDG_BIN_HOME:?}/${BINARY:?}"
  elif [[ ! -x "${XDG_BIN_HOME}/${BINARY}" ]]; then
    rm -rf "${XDG_BIN_HOME:?}/${BINARY:?}"
  elif [[ -x "${XDG_BIN_HOME}/${BINARY}" ]]; then
    local CURRENT_VERSION
    CURRENT_VERSION="$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")"
    if [[ "${VERSION}" == "" ]]; then
      echo -e "\033[1;33m  \U2713 Version could not be fetched \033[0m"
      _nredf_last_run "${CURRENT_TOOL}" "true" "3600"
      return 1
    fi
    if [[ "${VERSION}" == "${CURRENT_VERSION}" || "${TAGVERSION}" == "${CURRENT_VERSION}" ]]; then
      echo -e "\033[1;32m  \U2713 ${BINARY} (${VERSION}) up-to-date\033[0m"
      _nredf_last_run "${CURRENT_TOOL}" "true"
      return 0
    fi
  fi

  echo -e "\033[1;36m  \U25B6 ${BINARY} is getting installed in version ${VERSION}\033[0m"
  command curl -Lfso "${NREDF_DOWNLOADS}/${FILENAME}" "https://dl.k8s.io/release/${TAGVERSION}/bin/${NREDF_UNAME_LOWER}/${NREDF_ARCH}/${BINARY}"
  if [[ -f "${NREDF_DOWNLOADS}/${FILENAME}" ]]; then
    eval "${EXTRACT_CMD}"
  else
    echo -e "\033[1;31m    \U21B3 Installation failed\033[0m"
    return 1
  fi
  if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
    chmod +x "${XDG_BIN_HOME}/${BINARY}"
  else
    echo -e "\033[1;31m    \U21B3 Installation failed\033[0m"
    return 1
  fi

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/${BINARY}" ]] && "${XDG_BIN_HOME}/${BINARY}" completion "${NREDF_SHELL_NAME}" 2>/dev/null > "${XDG_CONFIG_HOME}/completion/${NREDF_SHELL_NAME}/_${BINARY}"
  fi
  echo -e "\033[1;32m    \U21B3 Installation successful\033[0m"
  _nredf_last_run "${CURRENT_TOOL}" "true"
}

function _nredf_install_krew() {
  [[ ! -f "${XDG_BIN_HOME}/kubectl" ]] && return 1
  _nredf_get_sys_info

  local GHUSER="kubernetes-sigs"
  local GHREPO="krew"
  local BINARY="krew"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${GHREPO}-${NREDF_UNAME_LOWER}_${NREDF_ARCH}.tar.gz"
  local VERSION_CMD="version | awk '/^GitTag/{print \$2}'"
  # shellcheck disable=SC2016
  local EXTRACT_CMD='
    tar -xzf "${NREDF_DOWNLOADS}/${FILENAME}" -C "${XDG_BIN_HOME}/" "./${FILENAME%.tar.gz}"
    mv "${XDG_BIN_HOME}/${FILENAME%.tar.gz}" "${XDG_BIN_HOME}/${BINARY}"
  '

  if _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"; then
    "${XDG_BIN_HOME}/${BINARY}" install krew 2>/dev/null
  fi

  if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
    export KREW_PLUGINS=()
    export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
    if _nredf_last_run; then
      return 0
    fi

    # Completion is currently not supported
    #if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    #  [[ -f "${XDG_BIN_HOME}/${BINARY}" ]] && "${XDG_BIN_HOME}/${BINARY}" completion "${NREDF_SHELL_NAME}" > "${XDG_CONFIG_HOME}/completion/${NREDF_SHELL_NAME}/_${BINARY}"
    #fi

    echo -e '\033[1m    Updating krew plugins\033[0m'
    kubectl krew update 2>/dev/null
    if kubectl krew upgrade 2>/dev/null; then
      _nredf_last_run "" "true"
    fi

    KREW_PLUGINS+=("ctx")
    KREW_PLUGINS+=("ns")
    KREW_PLUGINS+=("doctor")
    KREW_PLUGINS+=("fuzzy")
    KREW_PLUGINS+=("konfig")
    KREW_PLUGINS+=("images")
    KREW_PLUGINS+=("status")
    KREW_PLUGINS+=("oidc-login")
    KREW_PLUGINS+=("get-all")
    KREW_PLUGINS+=("resource-capacity")
    KREW_PLUGINS+=("deprecations")
    KREW_PLUGINS+=("df-pv")
    KREW_PLUGINS+=("outdated")
    KREW_PLUGINS+=("sniff")
    KREW_PLUGINS+=("unused-volumes")
    KREW_PLUGINS+=("cert-manager")

    for KREW_PLUGIN in "${KREW_PLUGINS[@]}"; do
      kubectl krew list | command grep -q "${KREW_PLUGIN}" || kubectl krew install "${KREW_PLUGIN}" 2>/dev/null
    done
  fi
}

function _nredf_install_kubeseal() {
  _nredf_get_sys_info

  local GHUSER="bitnami-labs"
  local GHREPO="sealed-secrets"
  local BINARY="kubeseal"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}" "v")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${BINARY}-${VERSION}-${NREDF_UNAME_LOWER}-${NREDF_ARCH}.tar.gz"
  local VERSION_CMD="--version | awk '{print \$3}'"
  local EXTRACT_CMD="tar -xzf \"${NREDF_DOWNLOADS}/${FILENAME}\" -C \"${XDG_BIN_HOME}/\" \"${BINARY}\""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"
}

function _nredf_install_kubent() {
  _nredf_get_sys_info

  local GHUSER="doitintl"
  local GHREPO="kube-no-trouble"
  local BINARY="kubent"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${BINARY}-${VERSION}-${NREDF_UNAME_LOWER}-${NREDF_ARCH}.tar.gz"
  local VERSION_CMD="--version 2>&1 | awk '{print \$4}'"
  local EXTRACT_CMD="tar -xzf \"${NREDF_DOWNLOADS}/${FILENAME}\" -C \"${XDG_BIN_HOME}/\" \"${BINARY}\""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"
}

function _nredf_install_fluxctl() {
  _nredf_get_sys_info

  local GHUSER="fluxcd"
  local GHREPO="flux"
  local BINARY="fluxctl"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${BINARY}_${NREDF_UNAME_LOWER}_${NREDF_ARCH}"
  local VERSION_CMD="version"
  local EXTRACT_CMD="mv \"${NREDF_DOWNLOADS}/${FILENAME}\" \"${XDG_BIN_HOME}/${BINARY}\""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/${BINARY}" ]] && "${XDG_BIN_HOME}/${BINARY}" completion "${NREDF_SHELL_NAME}" > "${XDG_CONFIG_HOME}/completion/${NREDF_SHELL_NAME}/_${BINARY}"
  fi
}

function _nredf_install_flux() {
  _nredf_get_sys_info

  local GHUSER="fluxcd"
  local GHREPO="flux2"
  local BINARY="flux"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${BINARY}_${VERSION}_${NREDF_UNAME_LOWER}_${NREDF_ARCH}.tar.gz"
  local VERSION_CMD="--version | awk '{print \$3}'"
  local EXTRACT_CMD="tar -xzf \"${NREDF_DOWNLOADS}/${FILENAME}\" -C \"${XDG_BIN_HOME}/\" \"${BINARY}\""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/${BINARY}" ]] && "${XDG_BIN_HOME}/${BINARY}" completion "${NREDF_SHELL_NAME}" > "${XDG_CONFIG_HOME}/completion/${NREDF_SHELL_NAME}/_${BINARY}"
  fi
}

function _nredf_install_helm() {
  _nredf_get_sys_info
  set -x
  local GHUSER="helm"
  local GHREPO="helm"
  local BINARY="helm"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${BINARY}-${TAGVERSION}-${NREDF_UNAME_LOWER}-${NREDF_ARCH}.tar.gz"
  local VERSION_CMD="version --template\='{{ .Version }}' 2>/dev/null"
  # shellcheck disable=SC2016
  local EXTRACT_CMD='
    tar -xzf "${NREDF_DOWNLOADS}/${FILENAME}" -C "${NREDF_DOWNLOADS}/"
    mv "${NREDF_DOWNLOADS}/${NREDF_UNAME_LOWER}-${NREDF_ARCH}/${BINARY}" "${XDG_BIN_HOME}/${BINARY}"
  '

  if [[ ! -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
    rm -rf "${XDG_BIN_HOME:?}/${BINARY:?}"
  elif [[ ! -x "${XDG_BIN_HOME}/${BINARY}" ]]; then
    rm -rf "${XDG_BIN_HOME:?}/${BINARY:?}"
  elif [[ -x "${XDG_BIN_HOME}/${BINARY}" ]]; then
    local CURRENT_VERSION
    CURRENT_VERSION="$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")"
    if [[ "${VERSION}" == "" ]]; then
      echo -e "\033[1;33m  \U2713 Version could not be fetched \033[0m"
      _nredf_last_run "${CURRENT_TOOL}" "true" "3600"
      return 1
    fi
    if [[ "${VERSION}" == "${CURRENT_VERSION}" || "${TAGVERSION}" == "${CURRENT_VERSION}" ]]; then
      echo -e "\033[1;32m  \U2713 ${BINARY} (${VERSION}) up-to-date\033[0m"
      _nredf_last_run "${CURRENT_TOOL}" "true"
      return 0
    fi
  fi

  echo -e "\033[1;36m  \U25B6 ${BINARY} is getting installed in version ${VERSION}\033[0m"
  command curl -Lfso "${NREDF_DOWNLOADS}/${FILENAME}" "https://get.helm.sh/${FILENAME}"
  if [[ -f "${NREDF_DOWNLOADS}/${FILENAME}" ]]; then
    eval "${EXTRACT_CMD}"
  else
    echo -e "\033[1;31m    \U21B3 Installation failed\033[0m"
    return 1
  fi

  if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
    chmod +x "${XDG_BIN_HOME}/${BINARY}"
  else
    echo -e "\033[1;31m    \U21B3 Installation failed\033[0m"
    return 1
  fi

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/${BINARY}" ]] && "${XDG_BIN_HOME}/${BINARY}" completion "${NREDF_SHELL_NAME}" 2>/dev/null > "${XDG_CONFIG_HOME}/completion/${NREDF_SHELL_NAME}/_${BINARY}"
  fi
  echo -e "\033[1;32m    \U21B3 Installation successful\033[0m"
  set +x
  _nredf_last_run "${CURRENT_TOOL}" "true"
}

function _nredf_install_k9s() {
  _nredf_get_sys_info

  local GHUSER="derailed"
  local GHREPO="k9s"
  local BINARY="k9s"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${GHREPO}_${NREDF_UNAME}_${NREDF_ARCH}.tar.gz"
  local VERSION_CMD="version -s | awk 'tolower(\$0) ~ /version/{print \$2}'"
  local EXTRACT_CMD="tar -xzf \"${NREDF_DOWNLOADS}/${FILENAME}\" -C \"${XDG_BIN_HOME}/\" \"${BINARY}\""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/${BINARY}" ]] && "${XDG_BIN_HOME}/${BINARY}" completion "${NREDF_SHELL_NAME}" > "${XDG_CONFIG_HOME}/completion/${NREDF_SHELL_NAME}/_${BINARY}"
  fi
}

function _nredf_install_velero() {
  _nredf_get_sys_info

  local GHUSER="vmware-tanzu"
  local GHREPO="velero"
  local BINARY="velero"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${BINARY}-${TAGVERSION}-${NREDF_UNAME_LOWER}-${NREDF_ARCH}.tar.gz"
  local VERSION_CMD="version --client-only | command grep 'Version' | awk '{print \$2}'"
  # shellcheck disable=SC2016
  local EXTRACT_CMD='
    tar -xzf "${NREDF_DOWNLOADS}/${FILENAME}" -C "${NREDF_DOWNLOADS}/"
    mv "${NREDF_DOWNLOADS}/${FILENAME%.tar.gz}/${BINARY}" "${XDG_BIN_HOME}/${BINARY}"
  '

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/${BINARY}" ]] && "${XDG_BIN_HOME}/${BINARY}" completion "${NREDF_SHELL_NAME}" > "${XDG_CONFIG_HOME}/completion/${NREDF_SHELL_NAME}/_${BINARY}"
  fi
}

function _nredf_install_kustomize() {
  _nredf_get_sys_info

  local GHUSER="kubernetes-sigs"
  local GHREPO="kustomize"
  local BINARY="kustomize"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}" "${BINARY}")
  # shellcheck disable=SC2295
  local VERSION=${TAGVERSION#${BINARY}\/v}
  # shellcheck disable=SC2295
  local FILENAME="${BINARY}_${TAGVERSION#${BINARY}\/}_${NREDF_UNAME_LOWER}_${NREDF_ARCH}.tar.gz"
  local VERSION_CMD="version"
  local EXTRACT_CMD="tar -xzf \"${NREDF_DOWNLOADS}/${FILENAME}\" -C \"${XDG_BIN_HOME}/\" \"${BINARY}\""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/${BINARY}" ]] && "${XDG_BIN_HOME}/${BINARY}" completion "${NREDF_SHELL_NAME}" > "${XDG_CONFIG_HOME}/completion/${NREDF_SHELL_NAME}/_${BINARY}"
  fi
}

function _nredf_install_stern() {
  _nredf_get_sys_info

  local GHUSER="stern"
  local GHREPO="stern"
  local BINARY="stern"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${BINARY}_${VERSION}_${NREDF_UNAME_LOWER}_${NREDF_ARCH}.tar.gz"
  local VERSION_CMD="--version | awk 'NR==1{print \$2}'"
  local EXTRACT_CMD="tar -xzf \"${NREDF_DOWNLOADS}/${FILENAME}\" -C \"${XDG_BIN_HOME}/\" \"${BINARY}\""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/${BINARY}" ]] && "${XDG_BIN_HOME}/${BINARY}" --completion "${NREDF_SHELL_NAME}" > "${XDG_CONFIG_HOME}/completion/${NREDF_SHELL_NAME}/_${BINARY}"
  fi
}

function _nredf_install_calico() {
  _nredf_get_sys_info

  local GHUSER="projectcalico"
  local GHREPO="calico"
  local BINARY="calicoctl"
  # shellcheck disable=SC2155
  local TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  local VERSION=${TAGVERSION#v}
  local FILENAME="${BINARY}-${NREDF_UNAME_LOWER}-${NREDF_ARCH}"
  local VERSION_CMD="version | awk '/Client Version/{print \$3}'"
  local EXTRACT_CMD="cp "${NREDF_DOWNLOADS}/${FILENAME}" "${XDG_BIN_HOME}/${BINARY}""

  _nredf_install_tool "${GHUSER}" "${GHREPO}" "${BINARY}" "${FILENAME}" "${TAGVERSION}" "${VERSION}" "${VERSION_CMD}" "${EXTRACT_CMD}"
}
