#!/usr/bin/env bash
#
# vim: ts=2 sw=2 et ff=unix ft=bash syntax=sh

for FUNCTION in "${NREDF_DOT_PATH}/shell/common/functions/"*;
  do source "${FUNCTION}"
done

function _nredf_set_ssh_agent() {
  if [[ -z ${SSH_CONNECTION} && "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]]; then
    unset SSH_AGENT_PID
    SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
    export SSH_AUTH_SOCK
  fi
}

function _nredf_get_sys_info() {
  NREDF_UNAMEM=$(uname -m)
  case ${NREDF_UNAMEM} in
    armv5*) NREDF_ARCH="armv5";;
    armv6*) NREDF_ARCH="armv6";;
    armv7*) NREDF_ARCH="arm";;
    aarch64) NREDF_ARCH="arm64";;
    x86) NREDF_ARCH="386";;
    x86_64) NREDF_ARCH="amd64";;
    i686) NREDF_ARCH="386";;
    i386) NREDF_ARCH="386";;
  esac

  NREDF_UNAMES="$(uname -s | tr '[:upper:]' '[:lower:]')"
  case "${NREDF_UNAMES}" in
    msys_nt*) NREDF_PLATFORM="pc-windows-msvc" ;;
    cygwin_nt*) NREDF_PLATFORM="pc-windows-msvc";;
    mingw*) NREDF_PLATFORM="pc-windows-msvc" ;;
    linux) NREDF_PLATFORM="unknown-linux-musl" ;;
    darwin) NREDF_PLATFORM="apple-darwin" ;;
    freebsd) NREDF_PLATFORM="unknown-freebsd" ;;
  esac

  NREDF_OS=$(uname|tr '[:upper:]' '[:lower:]')
  case "${NREDF_OS}" in
    mingw*) NREDF_OS='windows';;
  esac

  NREDF_SHELL_NAME=$(readlink /proc/$$/exe | awk -F'/' '{print $NF}')

  export NREDF_ARCH NREDF_OS NREDF_PLATFORM NREDF_SHELL_NAME
}

function _nredf_github_latest_release() {
  local GHUSER=${1}
  local GHREPO=${2}
  local TAGREGEX=${3:-""}
  local CACHEFILE="${NREDF_GHCACHE}/nredf_github_latest_release-${GHUSER}-${GHREPO}"

  if [[ ! -s "${CACHEFILE}" || $(date -r "${CACHEFILE}" +%s) -le $(($(date +%s) - 3600 )) ]]; then
    if [[ ${TAGREGEX} == "" ]]; then
      curl -fs "https://api.github.com/repos/${GHUSER}/${GHREPO}/releases/latest" | grep -Po '"tag_name":\s*"\K.*?(?=")' | head -n1 > "${CACHEFILE}"
    else
      # shellcheck disable=SC2086
      curl -fs "https://api.github.com/repos/${GHUSER}/${GHREPO}/releases" | grep -Po '"tag_name":\s*"\K'${TAGREGEX}'.*?(?=")' | head -n1 > "${CACHEFILE}"
    fi
  fi
  cat "${CACHEFILE}"
}

function _nredf_github_download_latest() {
  local GHUSER=${1}
  local GHREPO=${2}
  local GHFILE=${3}
  local VERSION=${4}
  local VERSIONURLENC

  if [[ ${VERSION} == "latest" ]]; then
    curl -Lfso "${NREDF_DOWNLOADS}/${GHFILE}" "https://github.com/${GHUSER}/${GHREPO}/releases/latest/download/${GHFILE}"
  else
    VERSIONURLENC=$(_nredf_urlencode "${VERSION}")
    curl -Lfso "${NREDF_DOWNLOADS}/${GHFILE}" "https://github.com/${GHUSER}/${GHREPO}/releases/download/${VERSIONURLENC}/${GHFILE}"
  fi

  return ${?}
}

function _nredf_urlencode() {
    old_lc_collate=$LC_COLLATE
    LC_COLLATE=C

    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:$i:1}"
        case $c in
            [a-zA-Z0-9.~_-]) printf '%s' "$c" ;;
            *) printf '%%%02X' "'$c" ;;
        esac
    done

    LC_COLLATE=$old_lc_collate
}

function _nredf_set_defaults() {
  echo -e '\033[1mSetting defaults\033[0m'
  [[ -f "${HOME}/.proxy.local" ]] && source "${HOME}/.proxy.local"

  export NREDF_COMMON_RC_LOCAL="${HOME}/.config/shell"
  export NREDF_RC_PATH="${NREDF_DOT_PATH}/shell/${NREDF_SHELL_NAME}"
  export NREDF_RC_LOCAL="${HOME}/.config/${NREDF_SHELL_NAME}"

  # You may need to manually set your language environment
  export LANG=en_US.UTF-8
  export LANGUAGE=en_US.UTF-8
  export LC_ALL=en_US.UTF-8

  export XDG_CONFIG_HOME="${HOME}/.config"
  export XDG_CACHE_HOME="${HOME}/.cache"
  export XDG_BIN_HOME="${HOME}/.local/bin"
  export XDG_DATA_HOME="${HOME}/.local/share"
  export XDG_STATE_HOME="${HOME}/.local/state"
  export NREDF_DOWNLOADS="${XDG_CACHE_HOME}/nredf/Download"
  export NREDF_GHCACHE="${XDG_CACHE_HOME}/nredf/GHVersionCache"
  for XDG_PATH in "${NREDF_RC_LOCAL}" "${NREDF_COMMON_RC_LOCAL}" "${XDG_CONFIG_HOME}" "${XDG_BIN_HOME}" "${XDG_CACHE_HOME}" "${NREDF_GHCACHE}" "${NREDF_DOWNLOADS}" "${XDG_DATA_HOME}" "${XDG_STATE_HOME}"; do
    [[ ! -d "${XDG_PATH}" ]] && mkdir -p "${XDG_PATH}"
  done

  export PATH="${HOME}/bin:${XDG_BIN_HOME}:/usr/local/bin:${PATH}"
  [[ -d /snap/bin ]] && export PATH="${PATH}:/snap/bin"
  export GOPATH="${HOME}/.local"
  export RLWRAP_HOME="${XDG_CACHE_HOME}/RLWRAP"
  [[ -s "${HOME}/.rvm/scripts/rvm" ]] && source "${HOME}/.rvm/scripts/rvm"

  # Load PYENV if you are using it
  if [[ -s ${HOME}/.pyenv ]]; then
    export PYENV_ROOT="${HOME}/.pyenv"
    export PATH="${PYENV_ROOT}/bin:${PATH}"
    eval "$(pyenv init -)"
  fi

  # FZF Defaults
  export FZF_DEFAULT_OPTS='--bind tab:down --bind btab:up --cycle --ansi'
  if command -v fd &>/dev/null; then
    export FZF_DEFAULT_COMMAND='fd --type file --follow --hidden --exclude .git --color=always'
    export FZF_ALT_C_COMMAND="fd --type directory --hidden --follow --exclude .git"
  else
    export FZF_DEFAULT_COMMAND="find -L"
  fi
  export FZF_CTRL_T_COMMAND="${FZF_DEFAULT_COMMAND}"

  #  VIM/NVIM Defaults
  # shellcheck disable=SC2016
  export GVIMINIT='let $MYGVIMRC="$XDG_CONFIG_HOME/vim/gvimrc" | source $MYGVIMRC'
  # shellcheck disable=SC2016
  export VIMINIT='let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc" | source $MYVIMRC'
  export NVIM_LOG_FILE="${XDG_CACHE_HOME}/vim/nvim_debug.log"
  export NVIM_RPLUGIN_MANIFESTE="${XDG_CACHE_HOME}/vim/rplugin.vim"

  # Timewarrior
  export TIMEWARRIORDB="${XDG_CACHE_HOME}/timewarrior"

  # docker-compose
  export COMPOSE_PARALLEL_LIMIT=10
  export COMPOSE_HTTP_TIMEOUT=600

  # k9s config directory
  export K9SCONFIG="${XDG_CONFIG_HOME}/k9s"

  # readline config
  export INPUTRC="${XDG_CONFIG_HOME}/readline/inputrc"

  # screen config
  export SCREENRC="${XDG_CONFIG_HOME}/screen/screenrc"

  # wget config
  export WGETRC="${XDG_CONFIG_HOME}/wgetrc"

  export XAUTHORITY="${XDG_RUNTIME_DIR}/Xauthority"

  export _Z_DATA="${XDG_DATA_HOME}/z"

  # asdf config
  export ASDF_DIR="${HOME}/.homesick/repos/asdf"
  export ASDF_DATA_DIR="${XDG_DATA_HOME}/asdf"
  export ASDF_CONFIG_FILE="${XDG_CONFIG_HOME}/asdf/asdfrc"
  export ADSF_DEFAULT_TOOL_VERSIONS_FILENAME="${XDG_CONFIG_HOME}/asdf/tool-versions"

  # make less more friendly for non-text input files, see lesspipe(1)
  if [ -x /usr/bin/lesspipe ]; then eval "$(SHELL=/bin/sh lesspipe)"; fi

  if command -v dircolors &>/dev/null; then
    if [[ -e "${XDG_CONFIG_HOME}/dircolors" ]]; then eval "$(dircolors "${XDG_CONFIG_HOME}/dircolors")"; fi
  fi
}

function _nredf_set_local() {
  echo -e '\033[1mSourcing local aliases and functions\033[0m'
  if [[ ! -d "${NREDF_RC_LOCAL}" ]]; then mkdir -p "${NREDF_RC_LOCAL}"; fi
  if [[ -e "${NREDF_DOT_PATH}/shell/common/aliases" ]]; then source "${NREDF_DOT_PATH}/shell/common/aliases"; fi
  if [[ -e "${NREDF_RC_PATH}/aliases" ]]; then source "${NREDF_RC_PATH}/aliases"; fi
  if [[ -f "${NREDF_RC_LOCAL}/aliases.local" ]]; then source "${NREDF_RC_LOCAL}/aliases.local"; else touch "${NREDF_RC_LOCAL}/aliases.local"; fi
  if [[ -e "${NREDF_RC_PATH}/functions" ]]; then source "${NREDF_RC_PATH}/functions"; fi
  if [[ -f "${NREDF_RC_LOCAL}/functions.local" ]]; then source "${NREDF_RC_LOCAL}/functions.local"; else touch "${NREDF_RC_LOCAL}/functions.local"; fi
  if [[ -f "${NREDF_COMMON_RC_LOCAL}/rc.local" ]]; then source "${NREDF_COMMON_RC_LOCAL}/rc.local"; else touch "${NREDF_COMMON_RC_LOCAL}/rc.local"; fi
  if [[ -f "${NREDF_RC_LOCAL}/rc.local" ]]; then source "${NREDF_RC_LOCAL}/rc.local"; else touch "${NREDF_RC_LOCAL}/rc.local"; fi
}

function _nredf_cleanup_dotfiles() {
  if [[ "${NREDF_OS}" == "linux" ]]; then
    echo -e '\033[1mSearch and delete broken symlinks\033[0m'
    find "${HOME}" -type l ! -exec test -e {} \; -delete
  fi
}

function _nredf_remote_multiplexer() {
  if [[ -n "${SSH_TTY}" || -n "${WSL_DISTRO_NAME}" ]] && command -v zellij &>/dev/null; then
    if [[ -z "${ZELLIJ}" ]]; then
      echo -e "\033[1mStarting multiplexer\033[0m"
      if [[ -n "${SSH_AUTH_SOCK}" ]] && [[ "${SSH_AUTH_SOCK}" != "${HOME}/.ssh/agent_sock" ]]; then
          unlink "${HOME}/.ssh/auth_sock" 2>/dev/null
          ln -sf "${SSH_AUTH_SOCK}" "${HOME}/.ssh/auth_sock"
          export SSH_AUTH_SOCK="${HOME}/.ssh/auth_sock"
      fi
      zellij attach -c "$(hostname -s)"
    fi
  elif [[ "${NREDF_OS}" == "linux" ]] && [[ -n "${SSH_TTY}" ]] && [[ "${PS1}" != "" ]] && command -pv tmux &>/dev/null; then
    if [[ -z "${TMUX}" ]]; then
      if [ -n "${SSH_AUTH_SOCK}" ] && [ "${SSH_AUTH_SOCK}" != "${HOME}/.ssh/agent_sock" ]; then
          unlink "${HOME}/.ssh/auth_sock" 2>/dev/null
          ln -sf "${SSH_AUTH_SOCK}" "${HOME}/.ssh/auth_sock"
          export SSH_AUTH_SOCK="${HOME}/.ssh/auth_sock"
      fi
            # Start tmux on connection
      if [[ "$(tmux -L "$(hostname -s)" has-session -t "$(hostname -s)" &>/dev/null; echo $?)" = 0 ]]; then
          echo -e '\033[1mAttach to running tmux session\033[0m'
          tmux -L "$(hostname -s)" attach-session -t "$(hostname -s)"
      elif [[ "$(which tmux 2>/dev/null)" != "" ]] && [[ "${TMUX}" = "" ]]; then
          echo -e '\033[1mStart new tmux session\033[0m'
          tmux -L "$(hostname -s)" new-session -s "$(hostname -s)"
      fi
    fi
  fi
}

function _nredf_install_fzf() {
  local VERSION
  _nredf_get_sys_info

  VERSION=$(_nredf_github_latest_release junegunn fzf)

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/fzf" ]] || [[ "${VERSION}" != "" && "${VERSION}" != "$("${XDG_BIN_HOME}/fzf" --version | awk '{print $1}')" ]]; then
    echo -e '\033[1m  Installing fzf\033[0m'
    [[ -d ${HOME}/.fzf ]] && rm -rf "${HOME}/.fzf"
    [[ -f ${HOME}/.fzf.bash ]] && rm -f "${HOME}/.fzf.bash"
    [[ -f ${HOME}/.fzf.zsh ]] && rm -f "${HOME}/.fzf.zsh"
    curl -Lfs "https://github.com/junegunn/fzf/releases/download/${VERSION}/fzf-${VERSION}-${NREDF_OS}_${NREDF_ARCH}.tar.gz" | tar xzf - -C "${XDG_BIN_HOME}/"
    curl -Lfso "${XDG_BIN_HOME}/fzf-tmux" "https://raw.githubusercontent.com/junegunn/fzf/master/bin/fzf-tmux"
    [[ ! -d ${HOME}/.config/fzf ]] && /bin/mkdir "${HOME}/.config/fzf"
    for FZF_FILE in completion.bash completion.zsh key-bindings.bash key-bindings.zsh key-bindings.fish; do
      curl -Lfso "${HOME}/.config/fzf/${FZF_FILE}" "https://raw.githubusercontent.com/junegunn/fzf/master/shell/${FZF_FILE}"
    done
    if [[ -f "${XDG_BIN_HOME}/fzf" ]]; then
      chmod +x "${XDG_BIN_HOME}/fzf"
    else
      return 1
    fi
    if [[ -f "${XDG_BIN_HOME}/fzf-tmux" ]]; then
      chmod +x "${XDG_BIN_HOME}/fzf-tmux"
    else
      return 1
    fi
  fi

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${HOME}/.config/fzf/completion.${NREDF_SHELL_NAME}" ]] && source "${HOME}/.config/fzf/completion.${NREDF_SHELL_NAME}"
    [[ -f "${HOME}/.config/fzf/key-bindings.${NREDF_SHELL_NAME}" ]] && source "${HOME}/.config/fzf/key-bindings.${NREDF_SHELL_NAME}"
  fi

  [[ -f "${NREDF_DOT_PATH}/shell/common/fzf" ]] && source "${NREDF_DOT_PATH}/shell/common/fzf"
}

function _nredf_install_nvim() {
  _nredf_get_sys_info
  local VERSION
  local GHUSER
  local GHREPO
  local BINARY
  local VERSION_CMD

  GHUSER="neovim"
  GHREPO="neovim"
  BINARY="nvim"
  VERSION=$(curl -fs "https://api.github.com/repos/neovim/neovim/releases/latest" | yq .body | awk '/NVIM/{sub(/\r?$/, ""); print $2}')
  VERSION_CMD="--version | awk '/NVIM/{print \$2}'"
  if [[ "${VERSION}" != "" && ! -e "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION}" != "" && "${VERSION}" != "$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")" ]]; then
    echo -e "\033[1m  Installing ${BINARY} Version ${VERSION}\033[0m"
    [[ -d "${HOME}/.cache/vim/squashfs-root" ]] && rm -rf "${HOME}/.cache/vim/squashfs-root"
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${BINARY}.appimage" "${VERSION}"
    if [[ -f "${NREDF_DOWNLOADS}/${BINARY}.appimage" ]]; then
      chmod +x "${NREDF_DOWNLOADS}/${BINARY}.appimage"
    else
      return 1
    fi
    PRERC_CURRENT_DIR=$(pwd)
    cd "${HOME}/.cache/vim/" || exit
    "${NREDF_DOWNLOADS}/${BINARY}.appimage" --appimage-extract &>/dev/null
    cd "${PRERC_CURRENT_DIR}" || exit
    unset PRERC_CURRENT_DIR
    ln -sf "${HOME}/.cache/vim/squashfs-root/AppRun" "${XDG_BIN_HOME}/nvim"
  fi
}

function _nredf_install_lf() {
  _nredf_get_sys_info
  local VERSION
  local GHUSER
  local GHREPO
  local BINARY
  local VERSION_CMD

  GHUSER="gokcehan"
  GHREPO="lf"
  BINARY="lf"
  VERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  VERSION_CMD="-version"

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION}" != "" && "${VERSION#v}" != "$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")" ]]; then
    echo -e "\033[1m  Installing ${BINARY} Version ${VERSION}\033[0m"
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${BINARY}-${NREDF_OS}-${NREDF_ARCH}.tar.gz" "${VERSION}"
    tar -xzf "${NREDF_DOWNLOADS}/${BINARY}-${NREDF_OS}-${NREDF_ARCH}.tar.gz" -C "${XDG_BIN_HOME}/"
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      chmod +x "${XDG_BIN_HOME}/${BINARY}"
    else
      return 1
    fi
  fi

  export LF_ICONS="tw=:st=:ow=:dt=:di=:fi=:ln=:or=:ex=:*.c=:*.cc=:*.clj=:*.coffee=:*.cpp=:*.css=:*.d=:*.dart=:*.erl=:*.exs=:*.fs=:*.go=:*.h=:*.hh=:*.hpp=:*.hs=:*.html=:*.java=:*.jl=:*.js=:*.json=:*.lua=:*.md=:*.php=:*.pl=:*.pro=:*.py=:*.rb=:*.rs=:*.scala=:*.ts=:*.vim=:*.cmd=:*.ps1=:*.sh=:*.bash=:*.zsh=:*.fish=:*.tar=:*.tgz=:*.arc=:*.arj=:*.taz=:*.lha=:*.lz4=:*.lzh=:*.lzma=:*.tlz=:*.txz=:*.tzo=:*.t7z=:*.zip=:*.z=:*.dz=:*.gz=:*.lrz=:*.lz=:*.lzo=:*.xz=:*.zst=:*.tzst=:*.bz2=:*.bz=:*.tbz=:*.tbz2=:*.tz=:*.deb=:*.rpm=:*.jar=:*.war=:*.ear=:*.sar=:*.rar=:*.alz=:*.ace=:*.zoo=:*.cpio=:*.7z=:*.rz=:*.cab=:*.wim=:*.swm=:*.dwm=:*.esd=:*.jpg=:*.jpeg=:*.mjpg=:*.mjpeg=:*.gif=:*.bmp=:*.pbm=:*.pgm=:*.ppm=:*.tga=:*.xbm=:*.xpm=:*.tif=:*.tiff=:*.png=:*.svg=:*.svgz=:*.mng=:*.pcx=:*.mov=:*.mpg=:*.mpeg=:*.m2v=:*.mkv=:*.webm=:*.ogm=:*.mp4=:*.m4v=:*.mp4v=:*.vob=:*.qt=:*.nuv=:*.wmv=:*.asf=:*.rm=:*.rmvb=:*.flc=:*.avi=:*.fli=:*.flv=:*.gl=:*.dl=:*.xcf=:*.xwd=:*.yuv=:*.cgm=:*.emf=:*.ogv=:*.ogx=:*.aac=:*.au=:*.flac=:*.m4a=:*.mid=:*.midi=:*.mka=:*.mp3=:*.mpc=:*.ogg=:*.ra=:*.wav=:*.oga=:*.opus=:*.spx=:*.xspf=:*.pdf=:*.nix=:"
}

function _nredf_install_lazygit() {
  _nredf_get_sys_info
  local VERSION
  local GHUSER
  local GHREPO
  local BINARY
  local VERSION_CMD

  GHUSER="jesseduffield"
  GHREPO="lazygit"
  BINARY="lazygit"
  VERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  VERSION_CMD="-v | awk '{print \$6}' | awk -F= '{gsub(/,/,\"\"); print \$2}'"

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION}" != "" && "${VERSION#v}" != "$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")" ]]; then
    echo -e "\033[1m  Installing ${BINARY} Version ${VERSION}\033[0m"
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${BINARY}_${VERSION#v}_$(uname)_$(uname -m).tar.gz" "${VERSION}"
    tar -xzf "${NREDF_DOWNLOADS}/${BINARY}_${VERSION#v}_$(uname)_$(uname -m).tar.gz" -C "${XDG_BIN_HOME}/" "${BINARY}"
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      chmod +x "${XDG_BIN_HOME}/${BINARY}"
    else
      return 1
    fi
  fi
}

function _nredf_install_btop() {
  _nredf_get_sys_info
  local VERSION
  local GHUSER
  local GHREPO
  local BINARY
  local VERSION_CMD
  local LIBC

  GHUSER="aristocratos"
  GHREPO="btop"
  BINARY="btop"
  VERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  VERSION_CMD="-v | awk '{print \$3}'"
  LIBC="musl"

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION}" != "" && "${VERSION#v}" != "$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")" ]]; then
    echo -e "\033[1m  Installing ${BINARY} Version ${VERSION}\033[0m"
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${BINARY}-${NREDF_UNAMEM}-${NREDF_OS}-${LIBC}.tbz" "${VERSION}"
    tar -xjf "${NREDF_DOWNLOADS}/${BINARY}-${NREDF_UNAMEM}-${NREDF_OS}-${LIBC}.tbz" -C "${XDG_BIN_HOME}/" --strip-components=3 --wildcards --no-anchored "bin/${BINARY}"
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      chmod +x "${XDG_BIN_HOME}/${BINARY}"
    else
      return 1
    fi
  fi
}

function _nredf_install_ctop() {
  if ! command -pv docker >/dev/null 2>&1; then
    return 0
  fi

  _nredf_get_sys_info
  local VERSION
  local GHUSER
  local GHREPO
  local BINARY
  local VERSION_CMD

  GHUSER="bcicen"
  GHREPO="ctop"
  BINARY="ctop"
  VERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  VERSION_CMD="-v | awk '{sub(\",\",\"\"); print \$3}'"

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION}" != "" && "${VERSION#v}" != "$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")" ]]; then
    echo -e "\033[1m  Installing ${BINARY} Version ${VERSION}\033[0m"
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${BINARY}-${VERSION#v}-${NREDF_OS}-${NREDF_ARCH}" "${VERSION}"
    mv "${NREDF_DOWNLOADS}/${BINARY}-${VERSION#v}-${NREDF_OS}-${NREDF_ARCH}" "${XDG_BIN_HOME}/${BINARY}"
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      chmod +x "${XDG_BIN_HOME}/${BINARY}"
    else
      return 1
    fi
  fi
}

function _nredf_install_drone() {
  _nredf_get_sys_info
  local VERSION
  local GHUSER
  local GHREPO
  local BINARY
  local VERSION_CMD

  GHUSER="harness"
  GHREPO="drone-cli"
  BINARY="drone"
  VERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  VERSION_CMD="--version | awk '{print \$3}'"

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION}" != "" && "${VERSION#v}" != "$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")" ]]; then
    echo -e "\033[1m  Installing ${BINARY} Version ${VERSION}\033[0m"
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${BINARY}_${NREDF_OS}_${NREDF_ARCH}.tar.gz" "${VERSION}"
    tar -xzf "${NREDF_DOWNLOADS}/${BINARY}_${NREDF_OS}_${NREDF_ARCH}.tar.gz" -C "${XDG_BIN_HOME}/"
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      chmod +x "${XDG_BIN_HOME}/${BINARY}"
    else
      return 1
    fi
  fi
}

function _nredf_install_zellij() {
  _nredf_get_sys_info
  local VERSION
  local GHUSER
  local GHREPO
  local BINARY
  local VERSION_CMD

  GHUSER="zellij-org"
  GHREPO="zellij"
  BINARY="zellij"
  VERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  VERSION_CMD="--version | awk '{print \$2}'"

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION}" != "" && "${VERSION#v}" != "$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")" ]]; then
    echo -e "\033[1m  Installing ${BINARY} Version ${VERSION}\033[0m"
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${GHREPO}-${NREDF_UNAMEM}-${NREDF_PLATFORM}.tar.gz" "${VERSION}"
    tar -xzf "${NREDF_DOWNLOADS}/${GHREPO}-${NREDF_UNAMEM}-${NREDF_PLATFORM}.tar.gz" -C "${XDG_BIN_HOME}/"
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      chmod +x "${XDG_BIN_HOME}/${BINARY}"
    else
      return 1
    fi
  fi

  #if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
  #  [[ -f "${XDG_BIN_HOME}/zellij" ]] && source <("${XDG_BIN_HOME}/zellij" setup --generate-completion ${NREDF_SHELL_NAME})
  #fi
}

function _nredf_install_ripgrep() {
  _nredf_get_sys_info
  local VERSION
  local GHUSER
  local GHREPO
  local BINARY
  local VERSION_CMD

  GHUSER="BurntSushi"
  GHREPO="ripgrep"
  BINARY="rg"
  VERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  VERSION_CMD="--version | awk '/ripgrep/{print \$2}'"

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION}" != "" && "${VERSION}" != "$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")" ]]; then
    echo -e "\033[1m  Installing ${BINARY} Version ${VERSION}\033[0m"
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${GHREPO}-${VERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}.tar.gz" "${VERSION}"
    tar -xzf "${NREDF_DOWNLOADS}/${GHREPO}-${VERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}.tar.gz" -C "${NREDF_DOWNLOADS}/"
    cp "${NREDF_DOWNLOADS}/${GHREPO}-${VERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}/${BINARY}" "${XDG_BIN_HOME}/"
    cp "${NREDF_DOWNLOADS}/${GHREPO}-${VERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}/complete/_rg" "${XDG_CONFIG_HOME}/completion/zsh/_rg"
    cp "${NREDF_DOWNLOADS}/${GHREPO}-${VERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}/complete/rg.bash" "${XDG_CONFIG_HOME}/completion/bash/rg.bash"
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      chmod +x "${XDG_BIN_HOME}/${BINARY}"
    else
      return 1
    fi
  fi
}

function _nredf_install_fd() {
  _nredf_get_sys_info
  local VERSION
  local GHUSER
  local GHREPO
  local BINARY
  local VERSION_CMD

  GHUSER="sharkdp"
  GHREPO="fd"
  BINARY="fd"
  VERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  VERSION_CMD="--version | awk '/fd/{print \$2}'"

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION}" != "" && "${VERSION#v}" != "$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")" ]]; then
    echo -e "\033[1m  Installing ${BINARY} Version ${VERSION}\033[0m"
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${GHREPO}-${VERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}.tar.gz" "${VERSION}"
    tar -xzf "${NREDF_DOWNLOADS}/${GHREPO}-${VERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}.tar.gz" -C "${NREDF_DOWNLOADS}/"
    cp "${NREDF_DOWNLOADS}/${GHREPO}-${VERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}/${BINARY}" "${XDG_BIN_HOME}/"
    cp "${NREDF_DOWNLOADS}/${GHREPO}-${VERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}/autocomplete/_fd" "${XDG_CONFIG_HOME}/completion/zsh/_fd"
    cp "${NREDF_DOWNLOADS}/${GHREPO}-${VERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}/autocomplete/fd.bash" "${XDG_CONFIG_HOME}/completion/bash/fd.bash"
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      chmod +x "${XDG_BIN_HOME}/${BINARY}"
    else
      return 1
    fi
  fi
}

function _nredf_install_duf() {
  _nredf_get_sys_info
  local VERSION
  local GHUSER
  local GHREPO
  local BINARY
  local VERSION_CMD

  GHUSER="muesli"
  GHREPO="duf"
  BINARY="duf"
  VERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  VERSION_CMD="-version | awk '/duf/{print \$2}'"

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION}" != "" && "${VERSION#v}" != "$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")" ]]; then
    echo -e "\033[1m  Installing ${BINARY} Version ${VERSION}\033[0m"
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${GHREPO}_${VERSION#v}_${NREDF_OS}_${NREDF_UNAMEM}.tar.gz" "${VERSION}"
    tar -xzf "${NREDF_DOWNLOADS}/${GHREPO}_${VERSION#v}_${NREDF_OS}_${NREDF_UNAMEM}.tar.gz" -C "${XDG_BIN_HOME}/" ${BINARY}
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      chmod +x "${XDG_BIN_HOME}/${BINARY}"
      if alias duf &>/dev/null; then
        unalias duf &>/dev/null
      fi
    else
      return 1
    fi
  fi
}

function _nredf_install_diskus() {
  _nredf_get_sys_info
  local VERSION
  local GHUSER
  local GHREPO
  local BINARY
  local VERSION_CMD

  GHUSER="sharkdp"
  GHREPO="diskus"
  BINARY="diskus"
  VERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  VERSION_CMD="--version | awk '/diskus/{print \$2}'"

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION}" != "" && "${VERSION#v}" != "$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")" ]]; then
    echo -e "\033[1m  Installing ${BINARY} Version ${VERSION}\033[0m"
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${GHREPO}-${VERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}.tar.gz" "${VERSION}"
    tar -xzf "${NREDF_DOWNLOADS}/${GHREPO}-${VERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}.tar.gz" -C "${NREDF_DOWNLOADS}/"
    cp "${NREDF_DOWNLOADS}/${GHREPO}-${VERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}/${BINARY}" "${XDG_BIN_HOME}/"
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      chmod +x "${XDG_BIN_HOME}/${BINARY}"
    else
      return 1
    fi
  fi
}

function _nredf_install_dust() {
  _nredf_get_sys_info
  local VERSION
  local GHUSER
  local GHREPO
  local BINARY
  local VERSION_CMD

  GHUSER="bootandy"
  GHREPO="dust"
  BINARY="dust"
  VERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  VERSION_CMD="--version | awk '/Dust/{print \$2}'"

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION}" != "" && "${VERSION#v}" != "$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")" ]]; then
    echo -e "\033[1m  Installing ${BINARY} Version ${VERSION}\033[0m"
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${GHREPO}-${VERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}.tar.gz" "${VERSION}"
    tar -xzf "${NREDF_DOWNLOADS}/${GHREPO}-${VERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}.tar.gz" -C "${NREDF_DOWNLOADS}/"
    cp "${NREDF_DOWNLOADS}/${GHREPO}-${VERSION}-${NREDF_UNAMEM}-${NREDF_PLATFORM}/${BINARY}" "${XDG_BIN_HOME}/"
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      chmod +x "${XDG_BIN_HOME}/${BINARY}"
    else
      return 1
    fi
  fi
}

function _nredf_install_yq() {
  _nredf_get_sys_info
  local GHUSER
  local GHREPO
  local BINARY
  local TAGVERSION
  local VERSION
  local VERSION_CMD
  local FILENAME
  local FILEEXT

  GHUSER="mikefarah"
  GHREPO="yq"
  BINARY="yq"
  TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  VERSION="${TAGVERSION}"
  # shellcheck disable=SC2021
  VERSION_CMD="-V | awk '{print \$4}'"
  FILENAME="${GHREPO}_${NREDF_OS}_${NREDF_ARCH}"
  FILEEXT=".tar.gz"

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION}" != "" && "${VERSION}" != "$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")" ]]; then
    echo -e "\033[1m  Installing ${BINARY} Version ${VERSION}\033[0m"
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${FILENAME}${FILEEXT}" "${TAGVERSION}"
    tar -xzf "${NREDF_DOWNLOADS}/${FILENAME}${FILEEXT}" -C "${XDG_BIN_HOME}/" "./${FILENAME}"
    mv "${XDG_BIN_HOME}/${FILENAME}" "${XDG_BIN_HOME}/${BINARY}"
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      chmod +x "${XDG_BIN_HOME}/${BINARY}"
    else
      return 1
    fi
  fi

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/${BINARY}" ]] && "${XDG_BIN_HOME}/${BINARY}" shell-completion "${NREDF_SHELL_NAME}" > "${XDG_CONFIG_HOME}/completion/${NREDF_SHELL_NAME}/_${BINARY}"
  fi
}

function _nredf_install_k8s_ops() {
  _nredf_install_kubectl
  _nredf_install_krew
  _nredf_install_kubeadm
  _nredf_install_kubeseal
  _nredf_install_fluxctl
  _nredf_install_flux
  _nredf_install_helm
  _nredf_install_k9s
  _nredf_install_velero
  _nredf_install_kustomize
  _nredf_install_stern
  _nredf_install_calico
  _nredf_install_kubent
}

function _nredf_install_kubectl() {
  local VERSION
  _nredf_get_sys_info

  VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt)

  if [[ ! -f "${XDG_BIN_HOME}/kubectl" ]] || [[ "${VERSION}" != "" && "${VERSION}" != "$("${XDG_BIN_HOME}/kubectl" version --output yaml --client | yq '.clientVersion.gitVersion')" ]]; then
    echo -e '\033[1m  Installing kubectl\033[0m'
    [[ -f "${XDG_BIN_HOME}/kubectl" ]] && rm -f "${XDG_BIN_HOME}/kubectl"
    curl -Lfso "${XDG_BIN_HOME}/kubectl" "https://dl.k8s.io/release/${VERSION}/bin/${NREDF_OS}/${NREDF_ARCH}/kubectl"
    if [[ -f "${XDG_BIN_HOME}/kubectl" ]]; then
      chmod +x "${XDG_BIN_HOME}/kubectl"
    else
      return 1
    fi
  fi

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/kubectl" ]] && source <("${XDG_BIN_HOME}/kubectl" completion "${NREDF_SHELL_NAME}")
  fi
}

function _nredf_install_krew() {
  [[ ! -f "${XDG_BIN_HOME}/kubectl" ]] && return 1
  _nredf_get_sys_info
  local GHUSER
  local GHREPO
  local BINARY
  local TAGVERSION
  local VERSION
  local VERSION_CMD
  local FILENAME
  local FILEEXT
  export KREW_PLUGINS=()
  export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

  GHUSER="kubernetes-sigs"
  GHREPO="krew"
  BINARY="krew"
  TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  VERSION="${TAGVERSION}"
  # shellcheck disable=SC2021
  VERSION_CMD="version | awk '/^GitTag/{print \$2}'"
  FILENAME="${GHREPO}-${NREDF_OS}_${NREDF_ARCH}"
  FILEEXT=".tar.gz"

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION}" != "" && "${VERSION}" != "$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")" ]]; then
    echo -e "\033[1m  Installing ${BINARY} Version ${VERSION}\033[0m"
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${FILENAME}${FILEEXT}" "${TAGVERSION}"
    tar -xzf "${NREDF_DOWNLOADS}/${FILENAME}${FILEEXT}" -C "${XDG_BIN_HOME}/" "./${FILENAME}"
    mv "${XDG_BIN_HOME}/${FILENAME}" "${XDG_BIN_HOME}/${BINARY}"
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      chmod +x "${XDG_BIN_HOME}/${BINARY}"
      "${XDG_BIN_HOME}/${BINARY}" install krew 2>/dev/null
    else
      return 1
    fi
  fi
  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/${BINARY}" ]] && "${XDG_BIN_HOME}/${BINARY}" completion "${NREDF_SHELL_NAME}" > "${XDG_CONFIG_HOME}/completion/${NREDF_SHELL_NAME}/_${BINARY}"
  fi

  echo -e '\033[1m    Updating krew plugins\033[0m'
  kubectl krew update 2>/dev/null
  kubectl krew upgrade 2>/dev/null

  KREW_PLUGINS+=("ctx")
  KREW_PLUGINS+=("ns")
  KREW_PLUGINS+=("doctor")
  KREW_PLUGINS+=("fuzzy")
  KREW_PLUGINS+=("konfig")
  KREW_PLUGINS+=("images")
  KREW_PLUGINS+=("status")
  KREW_PLUGINS+=("oidc-login")
  KREW_PLUGINS+=("get-all")
  KREW_PLUGINS+=("resource-capacity")
  KREW_PLUGINS+=("deprecations")
  KREW_PLUGINS+=("df-pv")
  KREW_PLUGINS+=("outdated")
  KREW_PLUGINS+=("sniff")
  KREW_PLUGINS+=("unused-volumes")
  KREW_PLUGINS+=("cert-manager")

  for KREW_PLUGIN in "${KREW_PLUGINS[@]}"; do
    kubectl krew list | grep -q "${KREW_PLUGIN}" || kubectl krew install "${KREW_PLUGIN}" 2>/dev/null
  done
}

function _nredf_install_kubeadm() {
  local VERSION
  _nredf_get_sys_info

  VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt)

  if [[ ! -f "${XDG_BIN_HOME}/kubeadm" ]] || [[ "${VERSION}" != "" && "${VERSION}" != "$("${XDG_BIN_HOME}/kubeadm" version -o short)" ]]; then
    echo -e '\033[1m  Installing kubeadm\033[0m'
    [[ -f "${XDG_BIN_HOME}/kubeadm" ]] && rm -f "${XDG_BIN_HOME}/kubeadm"
    curl -Lfso "${XDG_BIN_HOME}/kubeadm" "https://dl.k8s.io/release/${VERSION}/bin/${NREDF_OS}/${NREDF_ARCH}/kubeadm"
    if [[ -f "${XDG_BIN_HOME}/kubeadm" ]]; then
      chmod +x "${XDG_BIN_HOME}/kubeadm"
    else
      return 1
    fi
  fi

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/kubeadm" ]] && source <("${XDG_BIN_HOME}/kubeadm" completion "${NREDF_SHELL_NAME}")
  fi
}

function _nredf_install_kubeseal() {
  _nredf_get_sys_info
  local VERSION
  local GHUSER
  local GHREPO
  local BINARY
  local VERSION_CMD

  GHUSER="bitnami-labs"
  GHREPO="sealed-secrets"
  BINARY="kubeseal"
  TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}" "v")
  VERSION="${TAGVERSION#v}"
  VERSION_CMD="--version | awk '{print \$3}'"

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION}" != "" && "${VERSION}" != "$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")" ]]; then
    echo -e "\033[1m  Installing ${BINARY} Version ${VERSION}\033[0m"
    [[ -f "${XDG_BIN_HOME}/${BINARY}" ]] && rm -f "${XDG_BIN_HOME}/${BINARY}"
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${BINARY}-${VERSION}-${NREDF_OS}-${NREDF_ARCH}.tar.gz" "${TAGVERSION}"
    tar -xzf "${NREDF_DOWNLOADS}/${BINARY}-${VERSION}-${NREDF_OS}-${NREDF_ARCH}.tar.gz" -C "${XDG_BIN_HOME}/" "${BINARY}"
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      chmod +x "${XDG_BIN_HOME}/${BINARY}"
    else
      return 1
    fi
  fi
}

function _nredf_install_kubent() {
  _nredf_get_sys_info
  local VERSION
  local GHUSER
  local GHREPO
  local BINARY
  local VERSION_CMD

  GHUSER="doitintl"
  GHREPO="kube-no-trouble"
  BINARY="kubent"
  TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  VERSION="${TAGVERSION}"
  VERSION_CMD="--version 2>&1 | awk '{print \$4}'"

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION}" != "" && "${VERSION}" != "$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")" ]]; then
    echo -e "\033[1m  Installing ${BINARY} Version ${VERSION}\033[0m"
    [[ -f "${XDG_BIN_HOME}/${BINARY}" ]] && rm -f "${XDG_BIN_HOME}/${BINARY}"
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${BINARY}-${VERSION}-${NREDF_OS}-${NREDF_ARCH}.tar.gz" "${TAGVERSION}"
    tar -xzf "${NREDF_DOWNLOADS}/${BINARY}-${VERSION}-${NREDF_OS}-${NREDF_ARCH}.tar.gz" -C "${XDG_BIN_HOME}/" "${BINARY}"
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      chmod +x "${XDG_BIN_HOME}/${BINARY}"
    else
      return 1
    fi
  fi
}

function _nredf_install_fluxctl() {
  local VERSION
  _nredf_get_sys_info

  VERSION=$(_nredf_github_latest_release fluxcd flux)

  if [[ ! -f "${XDG_BIN_HOME}/fluxctl" ]] || [[ "${VERSION}" != "" && "${VERSION}" != "$("${XDG_BIN_HOME}/fluxctl" version)" ]]; then
    echo -e '\033[1m  Installing fluxctl\033[0m'
    [[ -f "${XDG_BIN_HOME}/fluxctl" ]] && rm -f "${XDG_BIN_HOME}/fluxctl"
    curl -Lfso "${XDG_BIN_HOME}/fluxctl" "https://github.com/fluxcd/flux/releases/latest/download/fluxctl_${NREDF_OS}_${NREDF_ARCH}"
    if [[ -f "${XDG_BIN_HOME}/fluxctl" ]]; then
      chmod +x "${XDG_BIN_HOME}/fluxctl"
    else
      return 1
    fi
  fi

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/fluxctl" ]] && source <("${XDG_BIN_HOME}/fluxctl" completion "${NREDF_SHELL_NAME}")
  fi
}

function _nredf_install_flux() {
  local VERSION
  _nredf_get_sys_info

  VERSION=$(_nredf_github_latest_release fluxcd flux2)

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/flux" ]] || [[ "${VERSION}" != "" && "${VERSION#v}" != "$("${XDG_BIN_HOME}/flux" --version | awk '{print $3}')" ]]; then
    echo -e '\033[1m  Installing flux\033[0m'
    [[ -f "${XDG_BIN_HOME}/flux" ]] && rm -f "${XDG_BIN_HOME}/flux"
    curl -Lfso - "https://github.com/fluxcd/flux2/releases/latest/download/flux_${VERSION#v}_${NREDF_OS}_${NREDF_ARCH}.tar.gz" | tar xzf - -C "${XDG_BIN_HOME}/"
    if [[ -f "${XDG_BIN_HOME}/flux" ]]; then
      chmod +x "${XDG_BIN_HOME}/flux"
    else
      return 1
    fi
  fi

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/flux" ]] && source <("${XDG_BIN_HOME}/flux" completion "${NREDF_SHELL_NAME}")
  fi
}

function _nredf_install_helm() {
  local VERSION
  _nredf_get_sys_info

  VERSION=$(_nredf_github_latest_release helm helm)

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/helm" ]] || [[ "${VERSION}" != "" && "${VERSION}" != "$("${XDG_BIN_HOME}/helm" version --template\='{{ .Version }}')" ]]; then
    echo -e '\033[1m  Installing helm\033[0m'
    [[ -f "${XDG_BIN_HOME}/helm" ]] && rm -f "${XDG_BIN_HOME}/helm"
    curl -Lfso - "https://get.helm.sh/helm-${VERSION}-${NREDF_OS}-${NREDF_ARCH}.tar.gz" | tar xzf - -C "${XDG_BIN_HOME}/" --strip-components=1 --wildcards --no-anchored '*helm'
    if [[ -f "${XDG_BIN_HOME}/helm" ]]; then
      chmod +x "${XDG_BIN_HOME}/helm"
    else
      return 1
    fi
  fi

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/helm" ]] && source <("${XDG_BIN_HOME}/helm" completion "${NREDF_SHELL_NAME}")
  fi
}

function _nredf_install_k9s() {
  _nredf_get_sys_info
  local GHUSER
  local GHREPO
  local BINARY
  local TAGVERSION
  local VERSION
  local VERSION_CMD
  local FILENAME
  local FILEEXT

  GHUSER="derailed"
  GHREPO="k9s"
  BINARY="k9s"
  TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  VERSION="${TAGVERSION}"
  # shellcheck disable=SC2021
  VERSION_CMD="version -s | awk 'tolower(\$0) ~ /version/{print \$2}'"
  FILENAME="${GHREPO}_$(uname)_${NREDF_ARCH}"
  FILEEXT=".tar.gz"

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION}" != "" && "${VERSION}" != "$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")" ]]; then
    echo -e "\033[1m  Installing ${BINARY} Version ${VERSION}\033[0m"
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${FILENAME}${FILEEXT}" "${TAGVERSION}"
    tar -xzf "${NREDF_DOWNLOADS}/${FILENAME}${FILEEXT}" -C "${XDG_BIN_HOME}/" "${BINARY}"
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      chmod +x "${XDG_BIN_HOME}/${BINARY}"
    else
      return 1
    fi
  fi

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/${BINARY}" ]] && "${XDG_BIN_HOME}/${BINARY}" completion "${NREDF_SHELL_NAME}" > "${XDG_CONFIG_HOME}/completion/${NREDF_SHELL_NAME}/_${BINARY}"
  fi
}

function _nredf_install_velero() {
  local VERSION
  _nredf_get_sys_info

  VERSION=$(_nredf_github_latest_release vmware-tanzu velero)

  if [[ ! -f "${XDG_BIN_HOME}/velero" ]] || [[ "${VERSION}" != "" && "${VERSION}" != "$("${XDG_BIN_HOME}/velero" version --client-only | grep Version | awk '{print $2}')" ]]; then
    echo -e '\033[1m  Installing velero\033[0m'
    [[ -f "${XDG_BIN_HOME}/velero" ]] && rm -f "${XDG_BIN_HOME}/velero"
    curl -Lfso - "https://github.com/vmware-tanzu/velero/releases/latest/download/velero-${VERSION}-${NREDF_OS}-${NREDF_ARCH}.tar.gz" | tar xzf - -C "${XDG_BIN_HOME}/" --strip-components=1 --wildcards --no-anchored '*velero'
    if [[ -f "${XDG_BIN_HOME}/velero" ]]; then
      chmod +x "${XDG_BIN_HOME}/velero"
    else
      return 1
    fi
  fi

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/velero" ]] && source <("${XDG_BIN_HOME}/velero" completion "${NREDF_SHELL_NAME}")
  fi
}

function _nredf_install_kustomize() {
  _nredf_get_sys_info
  local GHUSER
  local GHREPO
  local BINARY
  local TAGVERSION
  local VERSION
  local VERSION_CMD
  local FILENAME
  local FILEEXT

  GHUSER="kubernetes-sigs"
  GHREPO="kustomize"
  BINARY="kustomize"
  TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}" "${GHREPO}")
  VERSION="${TAGVERSION#"${GHREPO}"/}"
  # shellcheck disable=SC2021
  VERSION_CMD="version"
  FILENAME="${GHREPO}_${VERSION#"${GHREPO}"/}_${NREDF_OS}_${NREDF_ARCH}"
  FILEEXT=".tar.gz"

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION}" != "" && "${VERSION}" != "$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")" ]]; then
    echo -e "\033[1m  Installing ${BINARY} Version ${VERSION}\033[0m"
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${FILENAME}${FILEEXT}" "${TAGVERSION}"
    tar -xzf "${NREDF_DOWNLOADS}/${FILENAME}${FILEEXT}" -C "${XDG_BIN_HOME}/" "${BINARY}"
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      chmod +x "${XDG_BIN_HOME}/${BINARY}"
    else
      return 1
    fi
  fi

  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/${BINARY}" ]] && "${XDG_BIN_HOME}/${BINARY}" completion "${NREDF_SHELL_NAME}" > "${XDG_CONFIG_HOME}/completion/${NREDF_SHELL_NAME}/_${BINARY}"
  fi
}

function _nredf_install_stern() {
  _nredf_get_sys_info
  local GHUSER
  local GHREPO
  local BINARY
  local TAGVERSION
  local VERSION
  local VERSION_CMD
  local FILENAME
  local FILEEXT

  GHUSER="wercker"
  GHREPO="stern"
  BINARY="stern"
  TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  VERSION="${TAGVERSION}"
  # shellcheck disable=SC2021
  VERSION_CMD="--version | awk '{print \$3}'"
  FILENAME="${GHREPO}_${NREDF_OS}_${NREDF_ARCH}"
  FILEEXT=""

  if [[ "${VERSION}" != "" && ! -f "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION}" != "" && "${VERSION}" != "$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")" ]]; then
    echo -e "\033[1m  Installing ${BINARY} Version ${VERSION}\033[0m"
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${FILENAME}${FILEEXT}" "${TAGVERSION}"
    cp "${NREDF_DOWNLOADS}/${FILENAME}${FILEEXT}" "${XDG_BIN_HOME}/${BINARY}"
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      chmod +x "${XDG_BIN_HOME}/${BINARY}"
    else
      return 1
    fi
  fi
  if [[ "${NREDF_SHELL_NAME}" =~ ^(bash|zsh)$ ]]; then
    [[ -f "${XDG_BIN_HOME}/${BINARY}" ]] && "${XDG_BIN_HOME}/${BINARY}" --completion "${NREDF_SHELL_NAME}" > "${XDG_CONFIG_HOME}/completion/${NREDF_SHELL_NAME}/_${BINARY}"
  fi
}

function _nredf_install_calico() {
  _nredf_get_sys_info
  local GHUSER
  local GHREPO
  local BINARY
  local TAGVERSION
  local VERSION_REMOTE
  local VERSION_CMD
  local VERSION_LOCAL
  local FILENAME
  local FILEEXT

  GHUSER="projectcalico"
  GHREPO="calico"
  BINARY="kubectl-calico"
  TAGVERSION=$(_nredf_github_latest_release "${GHUSER}" "${GHREPO}")
  VERSION_REMOTE="${TAGVERSION}"
  # shellcheck disable=SC2021
  VERSION_CMD="version | awk '/Client Version/{print \$3}'"
  VERSION_LOCAL="$(eval "${XDG_BIN_HOME}/${BINARY} ${VERSION_CMD}")"
  FILENAME="${GHREPO}ctl-${NREDF_OS}-${NREDF_ARCH}"
  FILEEXT=""

  if [[ "${VERSION_REMOTE}" != "" && ! -f "${XDG_BIN_HOME}/${BINARY}" ]] || [[ "${VERSION_REMOTE}" != "" && "${VERSION_REMOTE}" != "${VERSION_LOCAL}" ]]; then
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      echo -e "\033[1m  Updating ${BINARY} from ${VERSION_LOCAL} to Version ${VERSION_REMOTE}\033[0m"
    else
      echo -e "\033[1m  Installing ${BINARY} Version ${VERSION_REMOTE}\033[0m"
    fi
    _nredf_github_download_latest "${GHUSER}" "${GHREPO}" "${FILENAME}${FILEEXT}" "${TAGVERSION}"
    cp "${NREDF_DOWNLOADS}/${FILENAME}${FILEEXT}" "${XDG_BIN_HOME}/${BINARY}"
    if [[ -f "${XDG_BIN_HOME}/${BINARY}" ]]; then
      chmod +x "${XDG_BIN_HOME}/${BINARY}"
    else
      return 1
    fi
  fi
}

