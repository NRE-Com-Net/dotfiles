################################################
#
#
#	For Entries that you want only local or
#	per user use ${HOME}/.bashrc_local
#
#
################################################

# If not running interactively, don't do anything
[ -z "${PS1}" ] && return

# Load RVM, if you are using it
[[ -s ${HOME}/.rvm/scripts/rvm ]] && source ${HOME}/.rvm/scripts/rvm

# Load homeshick
if [ -d ${HOME}/.homesick ]; then
	source "${HOME}/.homesick/repos/homeshick/homeshick.sh"
	source "${HOME}/.homesick/repos/homeshick/completions/homeshick-completion.bash"
fi

# Disable CTRL-S & CTRL-Q
stty stop ''
stty start ''
stty -ixon
stty -ixoff

#use english on commandline for better compatibility
export LANGUAGE="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
export LANG="en_US.UTF-8"
#set editor to vim
export EDITOR="vim"
export GIT_EDITOR="vim"

if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
	source /etc/bash_completion
fi

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
HISTCONTROL=${HISTCONTROL}${HISTCONTROL+,}ignoredups
HISTCONTROL=ignoreboth
# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

## Bash-it
# Path to the bash it configuration
export BASH_IT=${HOME}/.bash_it

# Lock and Load a custom theme file
# location /.bash_it/themes/
export BASH_IT_THEME='powerline'

# Load Bash It
[ -d ${BASH_IT} ] && source ${BASH_IT}/bash_it.sh

# Load npm completion
if [ -f /usr/lib/node_modules/npm/lib/utils/completion.sh ]; then
	source /usr/lib/node_modules/npm/lib/utils/completion.sh
fi

# Some special Aliases
alias reload="source ${HOME}/.bashrc"
alias htop="TERM=screen-256color htop"
alias root="sudo -E bash"
alias tmux="tmux -2"

# Load overrides
if [ -f ${HOME}/.bash_aliases ]; then
	source ${HOME}/.bash_aliases
fi

if [ -f ${HOME}/.bashrc_local ]; then
	source ${HOME}/.bashrc_local
fi

function _unsudo() {
	if [[ ${EUID} -eq 0 && -n ${SUDO_USER} && ${HOME} = $(eval echo ~${SUDO_USER}) ]]; then
		chown -R ${SUDO_USER}:${SUDO_UID} ${HOME}
		exit
	fi
}

trap _unsudo exit

function grep-invalid-utf8 () {
	perl -l -ne '/^([\000-\177]|[\300-\337][\200-\277]|[\340-\357][\200-\277]{2}|[\360-\367][\200-\277]{3}|[\370-\373][\200-\277]{4}|[\374-\375][\200-\277]{5})*$/ or print'
}

function fix-invalid-utf8 () {
	find | grep-invalid-utf8 | rename 'BEGIN {binmode STDIN, ":encoding(latin1)"; use Encode;}$_=encode("utf8", $_)'
}

function git_remove_submodule() {
	SUBMODULE_NAME=$(echo "${1}" | sed 's/\/$//'); shift

	if git submodule status "${SUBMODULE_NAME}" >/dev/null 2>&1; then
		git submodule deinit -f "${SUBMODULE_NAME}"
		git rm --cached "${SUBMODULE_NAME}"
		rm -rf .git/modules/${SUBMODULE_NAME}
		rm -rf ${SUBMODULE_NAME}
		git config -f .gitmodules --remove-section "submodule.${SUBMODULE_NAME}"
	else
		[ $# -gt 0 ] && echo "fatal: Submodule '${SUBMODULE_NAME}' not found" 1>&2
		exit 1
	fi
}

if [ -z "${TMUX}" ]; then
	if [ ! -z "${SSH_TTY}" ]; then
		if [ ! -z "SSH_AUTH_SOCK" ]; then
			ln -sf "${SSH_AUTH_SOCK}" "${HOME}/.ssh/auth_sock"
		fi
		export SSH_AUTH_SOCK="${HOME}/.ssh/auth_sock"
	fi
fi

[ -e ~/.config/dircolors-solarized/dircolors.256dark ] && eval `dircolors ~/.config/dircolors-solarized/dircolors.256dark`
PS1="${PS1}"'$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#D" | tr -d %) "$PWD")'
# Start tmux on connection
if [ "${PS1}" != "" -a "$(tmux has-session -t remote &>/dev/null; echo $?)" = 0 -a "${SSH_TTY:-x}" != x -a "$(which tmux 2>/dev/null)" != "" -a "${TMUX}" = "" ]; then
	tmux attach-session -t remote
elif [ "${PS1}" != "" -a "${SSH_TTY:-x}" != x -a "$(which tmux 2>/dev/null)" != "" -a "${TMUX}" = "" ]; then
	tmux new-session -s remote 
fi
