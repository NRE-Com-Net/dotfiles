################################################
#
#
#	For Entries that you want only local or
#	per user use ${HOME}/.bashrc_local
#
#
################################################

# If not running interactively, don't do anything
[ -z "${PS1}" ] && return

# Load RVM if you are using it
[[ -s ${HOME}/.rvm/scripts/rvm ]] && source ${HOME}/.rvm/scripts/rvm
# Load PYENV if you are using it
if [[ -s ${HOME}/.pyenv ]]; then
	export PYENV_ROOT="${HOME}/.pyenv"
	export PATH="${PYENV_ROOT}/bin:${PATH}"
	eval "$(pyenv init -)"
fi
# Load homeshick
if [ -d ${HOME}/.homesick ]; then
	source "${HOME}/.homesick/repos/homeshick/homeshick.sh"
	source "${HOME}/.homesick/repos/homeshick/completions/homeshick-completion.bash"
	homeshick pull -q
	homeshick link -q
fi

if [ -e ${HOME}/.config/bashrc_functions ]; then
	source "${HOME}/.config/bashrc_functions"
fi

# Disable CTRL-S & CTRL-Q
stty stop ''
stty start ''
stty -ixon
stty -ixoff

#use english on commandline for better compatibility
export LANGUAGE="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
export LANG="en_US.UTF-8"
#set editor to vim
export EDITOR="vim"
export GIT_EDITOR="vim"

if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
	source /etc/bash_completion
fi

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
HISTCONTROL=${HISTCONTROL}${HISTCONTROL+,}ignoredups
HISTCONTROL=ignoreboth
# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Lock and Load a custom theme file
[[ ${TERM} != "linux" ]] && source ~/.config/ps1/shell_prompt.sh

# Load npm completion
if [ -f /usr/lib/node_modules/npm/lib/utils/completion.sh ]; then
	source /usr/lib/node_modules/npm/lib/utils/completion.sh
fi

# Some special Aliases
alias reload="source ${HOME}/.bashrc"
alias htop="TERM=xterm-256color htop"
alias root="sudo env \"HOME=${HOME}\" \"SSH_AUTH_SOCK=${SSH_AUTH_SOCK}\" bash"
alias tmux="TERM=xterm-256color tmux -2"
alias vimfiler="TERM=xterm-256color vim -c \"VimFilerDouble\""
alias vim="TERM=xterm-256color vim"
alias nvim="TERM=xterm-256color nvim"
alias ll="ls -AlFh --color"
alias lls="ls -AlFh --color | sort -hk5"
alias dush="du -sh | sort -h"

# Load overrides
if [ -f ${HOME}/.bash_aliases ]; then
	source ${HOME}/.bash_aliases
fi

if [ -f ${HOME}/.bashrc_local ]; then
	source ${HOME}/.bashrc_local
fi

trap _unsudo exit

if [[ -e /etc/redhat-release ]] && [[ $(cat /etc/redhat-release | awk '{print $7}' | awk -F '.' '{print $1}') -lt 6 ]] && [[ -e ~/.config/dircolors-solarized/dircolors.rhel5.256dark ]]; then
    eval `dircolors ~/.config/dircolors-solarized/dircolors.rhel5.256dark`
elif [[ -e ~/.config/dircolors-solarized/dircolors.256dark ]]; then
    eval `dircolors ~/.config/dircolors-solarized/dircolors.256dark`
fi

if command -v keydchain >/dev/null 2>&1; then
	eval $(keychain --eval --agents gpg --quiet)
fi

if [[ -z "${TMUX}" ]] && [[ ! -z "${SSH_TTY}" ]]; then
	if [ ! -z "${SSH_AUTH_SOCK}" -a "${SSH_AUTH_SOCK}" != "${HOME}/.ssh/agent_sock" ]; then
		unlink "${HOME}/.ssh/auth_sock" 2>/dev/null
		ln -sf "${SSH_AUTH_SOCK}" "${HOME}/.ssh/auth_sock"
		export SSH_AUTH_SOCK="${HOME}/.ssh/auth_sock"
	fi
fi

# Start tmux on connection
if [ "${PS1}" != "" -a "$(tmux -L remote has-session -t remote &>/dev/null; echo $?)" = 0 -a "${SSH_TTY:-x}" != x -a "$(which tmux 2>/dev/null)" != "" -a "${TMUX}" = "" ]; then
	tmux -L remote attach-session -t remote
elif [ "${PS1}" != "" -a "${SSH_TTY:-x}" != x -a "$(which tmux 2>/dev/null)" != "" -a "${TMUX}" = "" ]; then
	tmux -f ~/.tmux.conf -L remote new-session -s remote
fi
