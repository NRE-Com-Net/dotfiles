# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
	local files
		IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
		[[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# Modified version where you can press
#   - CTRL-O to open with `open` command,
#   - CTRL-E or Enter key to open with the $EDITOR
fo() {
	local out file key
		IFS=$'\n' out=($(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e))
		key=${out[0]}
	file=${out[1]}
	if [ -n "$file" ]; then
		[ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
			fi
}
# vf - fuzzy open with vim from anywhere
# ex: vf word1 word2 ... (even part of a file name)
# zsh autoload function
vf() {
	local files

		files=(${(f)"$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1 -m)"})

		if [[ -n $files ]]
			then
				vim -- $files
				print -l $files[1]
				fi
}
# fd - cd to selected directory
fd() {
	local dir
		dir=$(find ${1:-.} -path '*/\.*' -prune \
				-o -type d -print 2> /dev/null | fzf +m) &&
		cd "$dir"
}
# fda - including hidden directories
fda() {
	local dir
		dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}
# fdr - cd to selected parent directory
fdr() {
	local declare dirs=()
		get_parent_dirs() {
			if [[ -d "${1}" ]]; then dirs+=("$1"); else return; fi
				if [[ "${1}" == '/' ]]; then
					for _dir in "${dirs[@]}"; do echo $_dir; done
				else
					get_parent_dirs $(dirname "$1")
						fi
		}
	local DIR=$(get_parent_dirs $(realpath "${1:-$(pwd)}") | fzf-tmux --tac)
		cd "$DIR"
}
# cf - fuzzy cd from anywhere
# ex: cf word1 word2 ... (even part of a file name)
# zsh autoload function
cf() {
	local file

		file="$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1)"

		if [[ -n $file ]]
			then
				if [[ -d $file ]]
					then
						cd -- $file
				else
					cd -- ${file:h}
	fi
		fi
}
# fh - repeat history
fh() {
	eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}
# fh - repeat history
fh() {
	print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}
# re-wrote the script above
bind '"\C-r": "\C-x1\e^\er"'
bind -x '"\C-x1": __fzf_history';

__fzf_history ()
{
	__ehc $(history | fzf --tac --tiebreak=index | perl -ne 'm/^\s*([0-9]+)/ and print "!$1"')
}

__ehc()
{
	if
		[[ -n $1 ]]
			then
				bind '"\er": redraw-current-line'
				bind '"\e^": magic-space'
				READLINE_LINE=${READLINE_LINE:+${READLINE_LINE:0:READLINE_POINT}}${1}${READLINE_LINE:+${READLINE_LINE:READLINE_POINT}}
	READLINE_POINT=$(( READLINE_POINT + ${#1} ))
	else
		bind '"\er":'
			bind '"\e^":'
			fi
}
# fkill - kill process
fkill() {
	pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

		if [ "x$pid" != "x" ]
			then
				kill -${1:-9} $pid
				fi
}
# fbr - checkout git branch
fbr() {
	local branches branch
		branches=$(git branch -vv) &&
		branch=$(echo "$branches" | fzf +m) &&
		git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

# fbr - checkout git branch (including remote branches)
fbr() {
	local branches branch
		branches=$(git branch --all | grep -v HEAD) &&
		branch=$(echo "$branches" |
				fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
		git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# fco - checkout git branch/tag
fco() {
	local tags branches target
		tags=$(
				git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
		branches=$(
				git branch --all | grep -v HEAD             |
				sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
				sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
		target=$(
				(echo "$tags"; echo "$branches") |
				fzf-tmux -l30 -- --no-hscroll --ansi +m -d "\t" -n 2) || return
		git checkout $(echo "$target" | awk '{print $2}')
}
# fcoc - checkout git commit
fcoc() {
	local commits commit
		commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
		commit=$(echo "$commits" | fzf --tac +s +m -e) &&
		git checkout $(echo "$commit" | sed "s/ .*//")
}
# fshow - git commit browser
fshow() {
	git log --graph --color=always \
							--format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
							fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
							--bind "ctrl-m:execute:
							(grep -o '[a-f0-9]\{7\}' | head -1 |
							 xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
							{}
	FZF-EOF"
}
# fstash - easier way to deal with stashes
# type fstash to get a list of your stashes
# enter shows you the contents of the stash
# ctrl-d shows a diff of the stash against your current HEAD
# ctrl-b checks the stash out as a branch, for easier merging
fstash() {
	local out q k sha
		while out=$(
				git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
				fzf --ansi --no-sort --query="$q" --print-query \
				--expect=ctrl-d,ctrl-b);
	do
		mapfile -t out <<< "$out"
			q="${out[0]}"
			k="${out[1]}"
			sha="${out[-1]}"
			sha="${sha%% *}"
			[[ -z "$sha" ]] && continue
			if [[ "$k" == 'ctrl-d' ]]; then
				git diff $sha
					elif [[ "$k" == 'ctrl-b' ]]; then
					git stash branch "stash-$sha" $sha
					break;
			else
				git stash show -p $sha
					fi
					done
}

