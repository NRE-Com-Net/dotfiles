#!/bin/bash

function extract {
	if [ -z "$1" ]; then
		# display usage if no parameters given
		echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
	else
		if [ -f $1 ] ; then
			NAME=${1%.*}
			mkdir $NAME && cd $NAME
			case $1 in
				*.tar.bz2)   tar xvjf ../$1    ;;
				*.tar.gz)    tar xvzf ../$1    ;;
				*.tar.xz)    tar xvJf ../$1    ;;
				*.lzma)      unlzma ../$1      ;;
				*.bz2)       bunzip2 ../$1     ;;
				*.rar)       unrar x -ad ../$1 ;;
				*.gz)        gunzip ../$1      ;;
				*.tar)       tar xvf ../$1     ;;
				*.tbz2)      tar xvjf ../$1    ;;
				*.tgz)       tar xvzf ../$1    ;;
				*.zip)       unzip ../$1       ;;
				*.Z)         uncompress ../$1  ;;
				*.7z)        7z x ../$1        ;;
				*.xz)        unxz ../$1        ;;
				*.exe)       cabextract ../$1  ;;
				*)           echo "extract: '$1' - unknown archive method" ;;
			esac
		else
			echo "$1 - file does not exist"
		fi
	fi
}

function _unsudo() {
	if [[ ${EUID} -eq 0 && -n ${SUDO_USER} && ${HOME} = $(eval echo ~${SUDO_USER}) ]]; then
		local SUDO_GROUP=$(id -g -n ${SUDO_USER})
		chown -R ${SUDO_USER}:${SUDO_GROUP} ${HOME}
		exit
	fi
}

function grep_invalid_utf8 () {
	perl -l -ne '/^([\000-\177]|[\300-\337][\200-\277]|[\340-\357][\200-\277]{2}|[\360-\367][\200-\277]{3}|[\370-\373][\200-\277]{4}|[\374-\375][\200-\277]{5})*$/ or print'
}

function fix_invalid_utf8 () {
	find | grep-invalid-utf8 | rename 'BEGIN {binmode STDIN, ":encoding(latin1)"; use Encode;}$_=encode("utf8", $_)'
}

function git_remove_submodule() {
	SUBMODULE_NAME=$(echo "${1}" | sed 's/\/$//'); shift

	if git submodule status "${SUBMODULE_NAME}" >/dev/null 2>&1; then
		git submodule deinit -f "${SUBMODULE_NAME}"
		git rm --cached "${SUBMODULE_NAME}"
		rm -rf .git/modules/${SUBMODULE_NAME}
		rm -rf ${SUBMODULE_NAME}
		git config -f .gitmodules --remove-section "submodule.${SUBMODULE_NAME}"
	else
		[ $# -gt 0 ] && echo "fatal: Submodule '${SUBMODULE_NAME}' not found" 1>&2
		exit 1
	fi
}

function start-gpg-agent() {
	if [[ $(command -v gpg-agent >/dev/null 2>&1) ]]; then
		if test -f ${HOME}/.gnupg/gpg-agent-info && kill -0 $(head -n 1 ${HOME}/.gnupg/gpg-agent-info | cut -d: -f2) 2>/dev/null ; then
			eval $(< ${HOME}/.gnupg/gpg-agent-info)
		else
			eval $(gpg-agent --daemon --enable-ssh-support --write-env-file ${HOME}/.gnupg/gpg-agent-info)
		fi
		export GPG_AGENT_INFO
		export SSH_AUTH_SOCK
	fi
}
